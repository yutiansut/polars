var searchIndex = JSON.parse('{\
"polars":{"doc":"Polars: DataFrames in RustPolars is a DataFrame library…","i":[[0,"chunked_array","polars","The typed heart of every Series column.",null,null],[3,"ChunkedArray","polars::chunked_array","ChunkedArrayEvery Series contains a `ChunkedArray<T>`.…",null,null],[3,"NoNull","","",null,null],[12,"0","","",0,null],[0,"ops","","Traits for miscellaneous operations on ChunkedArray",null,null],[4,"FillNoneStrategy","polars::chunked_array::ops","",null,null],[13,"Backward","","",1,null],[13,"Forward","","",1,null],[13,"Mean","","",1,null],[13,"Min","","",1,null],[13,"Max","","",1,null],[8,"ChunkBytes","","",null,null],[10,"to_byte_slices","","",2,[[],["vec",3]]],[8,"ChunkWindow","","",null,null],[11,"rolling_sum","","Apply a rolling sum (moving sum) over the values in this…",3,[[["option",4]],["result",6]]],[11,"rolling_mean","","Apply a rolling mean (moving mean) over the values in this…",3,[[["option",4]],["result",6]]],[11,"rolling_min","","Apply a rolling min (moving min) over the values in this…",3,[[["option",4]],["result",6]]],[11,"rolling_max","","Apply a rolling max (moving max) over the values in this…",3,[[["option",4]],["result",6]]],[11,"rolling_custom","","Apply a rolling aggregation over the values in this array.",3,[[["option",4],["initfold",4]],["result",6]]],[8,"TakeRandom","","Random access",null,null],[16,"Item","","",4,null],[10,"get","","Get a nullable value by index.",4,[[],["option",4]]],[10,"get_unchecked","","Get a value by index and ignore the null bit.",4,[[]]],[8,"TakeRandomUtf8","","",null,null],[16,"Item","","",5,null],[10,"get","","Get a nullable value by index.",5,[[],["option",4]]],[10,"get_unchecked","","Get a value by index and ignore the null bit.",5,[[]]],[8,"ChunkTake","","Fast access by index.",null,null],[10,"take","","Take values from ChunkedArray by index.",6,[[["option",4]]]],[10,"take_unchecked","","Take values from ChunkedArray by index",6,[[["option",4]]]],[10,"take_opt","","Take values from ChunkedArray by Option.",6,[[["option",4]]]],[10,"take_opt_unchecked","","Take values from ChunkedArray by Option.",6,[[["option",4]]]],[8,"ChunkSet","","Create a `ChunkedArray` with new values by index or by…",null,null],[10,"set_at_idx","","Set the values at indexes `idx` to some optional value…",7,[[["option",4]],["result",6]]],[10,"set_at_idx_with","","Set the values at indexes `idx` by applying a closure to…",7,[[],["result",6]]],[10,"set","","Set the values where the mask evaluates to `true` to some…",7,[[["option",4],["booleanchunked",6]],["result",6]]],[10,"set_with","","Set the values where the mask evaluates to `true` by…",7,[[["booleanchunked",6]],["result",6]]],[8,"ChunkCast","","Cast `ChunkedArray<T>` to `ChunkedArray<N>`",null,null],[10,"cast","","Cast `ChunkedArray<T>` to `ChunkedArray<N>`",8,[[],[["result",6],["chunkedarray",3]]]],[8,"ChunkApply","","Fastest way to do elementwise operations on a ChunkedArray",null,null],[10,"apply","","Apply a closure `F` elementwise.",9,[[]]],[10,"apply_with_idx","","Apply a closure elementwise. The closure gets the index of…",9,[[]]],[10,"apply_with_idx_on_opt","","Apply a closure elementwise. The closure gets the index of…",9,[[]]],[8,"ChunkAgg","","Aggregation operations",null,null],[10,"sum","","Aggregate the sum of the ChunkedArray. Returns `None` if…",10,[[],["option",4]]],[10,"min","","",10,[[],["option",4]]],[10,"max","","Returns the maximum value in the array, according to the…",10,[[],["option",4]]],[10,"mean","","Returns the mean value in the array. Returns `None` if the…",10,[[],["option",4]]],[10,"median","","Returns the mean value in the array. Returns `None` if the…",10,[[],["option",4]]],[10,"quantile","","Aggregate a given quantile of the ChunkedArray. Returns…",10,[[],[["option",4],["result",6]]]],[8,"ChunkVar","","Variance and standard deviation aggregation.",null,null],[11,"var","","Compute the variance of this ChunkedArray/Series.",11,[[],["option",4]]],[11,"std","","Compute the standard deviation of this ChunkedArray/Series.",11,[[],["option",4]]],[8,"ChunkCompare","","Compare Series and ChunkedArray\'s and get a `boolean` mask…",null,null],[10,"eq_missing","","Check for equality and regard missing values as equal.",12,[[],["booleanchunked",6]]],[10,"eq","","Check for equality.",12,[[],["booleanchunked",6]]],[10,"neq","","Check for inequality.",12,[[],["booleanchunked",6]]],[10,"gt","","Greater than comparison.",12,[[],["booleanchunked",6]]],[10,"gt_eq","","Greater than or equal comparison.",12,[[],["booleanchunked",6]]],[10,"lt","","Less than comparison.",12,[[],["booleanchunked",6]]],[10,"lt_eq","","Less than or equal comparison",12,[[],["booleanchunked",6]]],[8,"ChunkUnique","","Get unique values in a `ChunkedArray`",null,null],[10,"unique","","Get unique values of a ChunkedArray",13,[[],[["chunkedarray",3],["result",6]]]],[10,"arg_unique","","Get first index of the unique values in a `ChunkedArray`.…",13,[[],[["result",6],["vec",3]]]],[11,"n_unique","","Number of unique values in the `ChunkedArray`",13,[[],["result",6]]],[11,"is_unique","","Get a mask of all the unique values.",13,[[],[["booleanchunked",6],["result",6]]]],[11,"is_duplicated","","Get a mask of all the duplicated values.",13,[[],[["booleanchunked",6],["result",6]]]],[11,"value_counts","","Count the unique values.",13,[[],[["dataframe",3],["result",6]]]],[8,"ToDummies","","",null,null],[11,"to_dummies","","",14,[[],[["dataframe",3],["result",6]]]],[8,"ChunkSort","","Sort operations on `ChunkedArray`.",null,null],[10,"sort","","Returned a sorted `ChunkedArray`.",15,[[],["chunkedarray",3]]],[10,"sort_in_place","","Sort this array in place.",15,[[]]],[10,"argsort","","Retrieve the indexes needed to sort this array.",15,[[],["vec",3]]],[8,"ChunkFillNone","","Replace None values with various strategies",null,null],[10,"fill_none","","Replace None values with one of the following strategies:",16,[[["fillnonestrategy",4]],["result",6]]],[10,"fill_none_with_value","","Replace None values with a give value `T`.",16,[[],["result",6]]],[8,"ChunkFull","","Fill a ChunkedArray with one value.",null,null],[10,"full","","Create a ChunkedArray with a single value.",17,[[]]],[10,"full_null","","",17,[[]]],[8,"ChunkReverse","","Reverse a ChunkedArray",null,null],[10,"reverse","","Return a reversed version of this array.",18,[[],["chunkedarray",3]]],[8,"ChunkFilter","","Filter values by a boolean mask.",null,null],[10,"filter","","Filter values in the ChunkedArray with a boolean mask.",19,[[["booleanchunked",6]],[["chunkedarray",3],["result",6]]]],[8,"ChunkExpandAtIndex","","Create a new ChunkedArray filled with values at that index.",null,null],[10,"expand_at_index","","Create a new ChunkedArray filled with values at that index.",20,[[],["chunkedarray",3]]],[8,"ChunkShift","","Shift the values of a ChunkedArray by a number of periods.",null,null],[10,"shift","","Shift the values by a given period and fill the parts that…",21,[[["option",4]],[["chunkedarray",3],["result",6]]]],[8,"ChunkZip","","Combine 2 ChunkedArrays based on some predicate.",null,null],[10,"zip_with","","Create a new ChunkedArray with values from self where the…",22,[[["booleanchunked",6],["chunkedarray",3]],[["chunkedarray",3],["result",6]]]],[10,"zip_with_series","","Create a new ChunkedArray with values from self where the…",22,[[["booleanchunked",6],["series",4]],[["chunkedarray",3],["result",6]]]],[8,"ChunkAggSeries","","Aggregations that return Series of unit length. Those can…",null,null],[11,"sum_as_series","","Get the sum of the ChunkedArray as a new Series of length 1.",23,[[],["series",4]]],[11,"max_as_series","","Get the max of the ChunkedArray as a new Series of length 1.",23,[[],["series",4]]],[11,"min_as_series","","Get the min of the ChunkedArray as a new Series of length 1.",23,[[],["series",4]]],[11,"mean_as_series","","Get the mean of the ChunkedArray as a new Series of length…",23,[[],["series",4]]],[11,"median_as_series","","Get the median of the ChunkedArray as a new Series of…",23,[[],["series",4]]],[11,"quantile_as_series","","Get the quantile of the ChunkedArray as a new Series of…",23,[[],[["result",6],["series",4]]]],[8,"VarAggSeries","","",null,null],[11,"var_as_series","","Get the variance of the ChunkedArray as a new Series of…",24,[[],["series",4]]],[11,"std_as_series","","Get the standard deviation of the ChunkedArray as a new…",24,[[],["series",4]]],[8,"ChunkApplyKernel","","Apply kernels on the arrow array chunks in a ChunkedArray.",null,null],[10,"apply_kernel","","Apply kernel and return result as a new ChunkedArray.",25,[[]]],[10,"apply_kernel_cast","","",25,[[],["chunkedarray",3]]],[0,"arithmetic","polars::chunked_array","Implementations of arithmetic operations on ChunkedArray\'s.",null,null],[8,"Pow","polars::chunked_array::arithmetic","",null,null],[10,"pow_f32","","",26,[[],["float32chunked",6]]],[10,"pow_f64","","",26,[[],["float64chunked",6]]],[0,"builder","polars::chunked_array","",null,null],[0,"memory","polars::chunked_array::builder","Defines memory-related functions, such as…",null,null],[17,"ALIGNMENT","polars::chunked_array::builder::memory","Cache and allocation multiple alignment size",null,null],[5,"allocate_aligned","","",null,[[]]],[5,"free_aligned","","SafetyThis function is unsafe because undefined behavior…",null,[[]]],[5,"reallocate","","SafetyThis function is unsafe because undefined behavior…",null,[[]]],[5,"memcpy","","SafetyBehavior is undefined if any of the following…",null,[[]]],[5,"memcmp","","",null,[[]]],[5,"is_aligned","","Check if the pointer `p` is aligned to offset `a`.",null,[[]]],[5,"is_ptr_aligned","","",null,[[]]],[3,"PrimitiveChunkedBuilder","polars::chunked_array::builder","",null,null],[12,"builder","","",27,null],[3,"Utf8ChunkedBuilder","","",null,null],[12,"builder","","",28,null],[12,"capacity","","",28,null],[3,"Utf8ChunkedBuilderCow","","",null,null],[3,"AlignedVec","","A `Vec` wrapper with a memory alignment equal to Arrow\'s…",null,null],[3,"ListPrimitiveChunkedBuilder","","",null,null],[12,"builder","","",29,null],[3,"ListUtf8ChunkedBuilder","","",null,null],[5,"build_primitive_ca_with_opt","","",null,[[],["chunkedarray",3]]],[5,"build_with_existing_null_bitmap_and_slice","","Take an existing slice and a null bitmap and construct an…",null,[[["option",4],["buffer",3]],["primitivearray",3]]],[5,"get_bitmap","","Get the null count and the null bitmap of the arrow array",null,[[]]],[5,"round_upto_multiple_of_64","","Returns the nearest number that is `>=` than `num` and is…",null,[[]]],[5,"aligned_vec_to_primitive_array","","Take an owned Vec that is 64 byte aligned and create a…",null,[[["option",4],["alignedvec",3],["buffer",3],["option",4]],[["primitivearray",3],["polarsprimitivetype",8]]]],[5,"get_list_builder","","",null,[[["arrowdatatype",4]],[["box",3],["listbuildertrait",8]]]],[6,"BooleanChunkedBuilder","","",null,null],[8,"ChunkedBuilder","","",null,null],[10,"append_value","","",30,[[]]],[10,"append_null","","",30,[[]]],[11,"append_option","","",30,[[["option",4]]]],[10,"finish","","",30,[[],["chunkedarray",3]]],[8,"NewChunkedArray","","",null,null],[10,"new_from_slice","","",31,[[]]],[10,"new_from_opt_slice","","",31,[[]]],[10,"new_from_opt_iter","","Create a new ChunkedArray from an iterator.",31,[[]]],[10,"new_from_iter","","Create a new ChunkedArray from an iterator.",31,[[]]],[8,"ListBuilderTrait","","",null,null],[10,"append_opt_series","","",32,[[["option",4]]]],[10,"append_series","","",32,[[["series",4]]]],[10,"finish","","",32,[[],["listchunked",6]]],[11,"new","","",27,[[]]],[11,"len","","",27,[[]]],[11,"is_empty","","",27,[[]]],[11,"capacity","","",27,[[]]],[11,"new","","",28,[[]]],[11,"append_value","","Appends a value of type `T` into the builder",28,[[["asref",8]]]],[11,"append_null","","Appends a null slot into the builder",28,[[]]],[11,"append_option","","",28,[[["asref",8],["option",4]]]],[11,"finish","","",28,[[],["utf8chunked",6]]],[11,"new","","",33,[[]]],[11,"with_capacity_aligned","","Create a new Vec where first bytes memory address has an…",34,[[]]],[11,"is_empty","","",34,[[]]],[11,"reserve","","",34,[[]]],[11,"len","","",34,[[]]],[11,"from_ptr","","Create a new aligned vec from a ptr.",34,[[]]],[11,"push","","Push at the end of the Vec. This is unsafe because a push…",34,[[]]],[11,"set_len","","Set the length of the underlying `Vec`.",34,[[]]],[11,"resize","","",34,[[]]],[11,"as_ptr","","",34,[[]]],[11,"as_mut_ptr","","",34,[[]]],[11,"capacity","","",34,[[]]],[11,"into_raw_parts","","",34,[[]]],[11,"shrink_to_fit","","",34,[[]]],[11,"new","","",29,[[["primitivebuilder",3]]]],[11,"append_slice","","",29,[[["option",4]]]],[11,"append_opt_slice","","",29,[[["option",4]]]],[11,"append_null","","",29,[[]]],[11,"new","","",35,[[["stringbuilder",3]]]],[0,"cast","polars::chunked_array","Implementations of the ChunkCast Trait.",null,null],[0,"comparison","","",null,null],[8,"NumComp","polars::chunked_array::comparison","",null,null],[8,"CompToSeries","","",null,null],[11,"lt_series","","",36,[[["series",4]],["booleanchunked",6]]],[11,"gt_series","","",36,[[["series",4]],["booleanchunked",6]]],[11,"gt_eq_series","","",36,[[["series",4]],["booleanchunked",6]]],[11,"lt_eq_series","","",36,[[["series",4]],["booleanchunked",6]]],[11,"eq_series","","",36,[[["series",4]],["booleanchunked",6]]],[11,"neq_series","","",36,[[["series",4]],["booleanchunked",6]]],[11,"all_true","polars::chunked_array","",37,[[]]],[11,"all_false","","",37,[[]]],[0,"float","","",null,null],[8,"ChunkIntegerDecode","polars::chunked_array::float","",null,null],[10,"integer_decode","","",38,[[]]],[8,"IntegerDecode","","",null,null],[10,"integer_decode","","",39,[[]]],[0,"iterator","polars::chunked_array","",null,null],[3,"NumIterSingleChunkNullCheck","polars::chunked_array::iterator","Single chunk with null values",null,null],[3,"NumIterSingleChunk","","Single chunk no null values",null,null],[3,"NumIterManyChunk","","Many chunks no null checks Both used as iterator with null…",null,null],[3,"NumIterManyChunkNullCheck","","Many chunks with null checks",null,null],[3,"Utf8IterSingleChunkReturnUnwrapped","","Iterator for chunked arrays with just one chunk. The…",null,null],[3,"Utf8IterManyChunkReturnUnwrapped","","Iterator for chunked arrays with many chunks. The chunks…",null,null],[3,"Utf8IterSingleChunkReturnOption","","Iterator for chunked arrays with just one chunk. The chunk…",null,null],[3,"Utf8IterSingleChunkNullCheckReturnOption","","Iterator for chunked arrays with just one chunk. The chunk…",null,null],[3,"Utf8IterManyChunkReturnOption","","Iterator for chunked arrays with many chunks. The chunks…",null,null],[3,"Utf8IterManyChunkNullCheckReturnOption","","Iterator for chunked arrays with many chunks. The chunks…",null,null],[3,"BooleanIterCont","","No null checks and dont return Option but T directly. So…",null,null],[3,"BooleanIterSingleChunk","","No null checks",null,null],[3,"BooleanIterSingleChunkNullCheck","","",null,null],[3,"BooleanIterManyChunk","","Many chunks no nulls",null,null],[3,"BooleanIterManyChunkNullCheck","","Many chunks no nulls",null,null],[3,"ListIterCont","","No null checks and dont return Option but T directly. So…",null,null],[3,"ListIterSingleChunk","","No null checks",null,null],[3,"ListIterSingleChunkNullCheck","","",null,null],[3,"ListIterManyChunk","","Many chunks no nulls",null,null],[3,"ListIterManyChunkNullCheck","","Many chunks no nulls",null,null],[4,"NumericChunkIterDispatch","","",null,null],[13,"SingleChunk","","",40,null],[13,"SingleChunkNullCheck","","",40,null],[13,"ManyChunk","","",40,null],[13,"ManyChunkNullCheck","","",40,null],[4,"Utf8ChunkIterReturnUnwrappedDispatch","","Static dispatching structure to allow static polymorphism…",null,null],[13,"SingleChunk","","",41,null],[13,"ManyChunk","","",41,null],[4,"Utf8ChunkIterReturnOptionDispatch","","Static dispatching structure to allow static polymorphism…",null,null],[13,"SingleChunk","","",42,null],[13,"SingleChunkNullCheck","","",42,null],[13,"ManyChunk","","",42,null],[13,"ManyChunkNullCheck","","",42,null],[4,"BooleanIterDispatch","","",null,null],[13,"SingleChunk","","",43,null],[13,"SingleChunkNullCheck","","",43,null],[13,"ManyChunk","","",43,null],[13,"ManyChunkNullCheck","","",43,null],[4,"ListIterDispatch","","",null,null],[13,"SingleChunk","","",44,null],[13,"SingleChunkNullCheck","","",44,null],[13,"ManyChunk","","",44,null],[13,"ManyChunkNullCheck","","",44,null],[0,"par","","",null,null],[0,"utf8","polars::chunked_array::iterator::par","",null,null],[3,"Utf8ParIterSingleChunkReturnOption","polars::chunked_array::iterator::par::utf8","Parallel Iterator for chunked arrays with just one chunk.…",null,null],[3,"Utf8ParIterSingleChunkNullCheckReturnOption","","Parallel Iterator for chunked arrays with just one chunk.…",null,null],[3,"Utf8ParIterManyChunkReturnOption","","Parallel Iterator for chunked arrays with more than one…",null,null],[3,"Utf8ParIterManyChunkNullCheckReturnOption","","Parallel Iterator for chunked arrays with more than one…",null,null],[3,"Utf8ParIterSingleChunkReturnUnwrapped","","Parallel Iterator for chunked arrays with just one chunk.…",null,null],[3,"Utf8ParIterManyChunkReturnUnwrapped","","Parallel Iterator for chunked arrays with many chunk. The…",null,null],[4,"Utf8ChunkParIterReturnOptionDispatch","","Static dispatching structure to allow static polymorphism…",null,null],[13,"SingleChunk","","",45,null],[13,"SingleChunkNullCheck","","",45,null],[13,"ManyChunk","","",45,null],[13,"ManyChunkNullCheck","","",45,null],[4,"Utf8ChunkParIterReturnUnwrapppedDispatch","","Static dispatching structure to allow static polymorphism…",null,null],[13,"SingleChunk","","",46,null],[13,"ManyChunk","","",46,null],[8,"IntoNoNullIterator","polars::chunked_array::iterator","Trait for ChunkedArrays that don\'t have null values.",null,null],[16,"Item","","",47,null],[16,"IntoIter","","",47,null],[10,"into_no_null_iter","","",47,[[]]],[0,"kernels","polars::chunked_array","",null,null],[0,"set","polars::chunked_array::kernels","",null,null],[5,"set_with_value","polars::chunked_array::kernels::set","Is very fast when large parts of the mask are false, or…",null,[[["booleanarray",6],["primitivearray",3]],["primitivearray",3]]],[0,"temporal","polars::chunked_array::kernels","",null,null],[5,"date32_as_duration","polars::chunked_array::kernels::temporal","",null,[[["primitivearray",3]],["arrayref",6]]],[5,"date64_as_duration","","",null,[[["primitivearray",3]],["arrayref",6]]],[5,"date32_to_year","","",null,[[["primitivearray",3]],["arrayref",6]]],[5,"date32_to_month","","",null,[[["primitivearray",3]],["arrayref",6]]],[5,"date32_to_day","","",null,[[["primitivearray",3]],["arrayref",6]]],[5,"date32_to_ordinal","","",null,[[["primitivearray",3]],["arrayref",6]]],[5,"date64_to_year","","",null,[[["primitivearray",3]],["arrayref",6]]],[5,"date64_to_month","","",null,[[["primitivearray",3]],["arrayref",6]]],[5,"date64_to_day","","",null,[[["primitivearray",3]],["arrayref",6]]],[5,"date64_to_hour","","",null,[[["primitivearray",3]],["arrayref",6]]],[5,"date64_to_minute","","",null,[[["primitivearray",3]],["arrayref",6]]],[5,"date64_to_second","","",null,[[["primitivearray",3]],["arrayref",6]]],[5,"date64_to_nanosecond","","",null,[[["primitivearray",3]],["arrayref",6]]],[5,"date64_to_ordinal","","",null,[[["primitivearray",3]],["arrayref",6]]],[0,"zip_with","polars::chunked_array::kernels","",null,null],[5,"zip","polars::chunked_array::kernels::zip_with","",null,[[["booleanarray",6],["primitivearray",3]],[["primitivearray",3],["result",6]]]],[11,"to_ndarray","polars::chunked_array","If data is aligned in a single chunk and has no Null…",37,[[],[["result",6],["arrayview1",6]]]],[11,"to_ndarray","","If all nested `Series` have the same length, a 2…",37,[[],[["result",6],["array2",6]]]],[0,"object","","",null,null],[3,"ObjectArray","polars::chunked_array::object","",null,null],[0,"builder","","",null,null],[3,"ObjectChunkedBuilder","polars::chunked_array::object::builder","",null,null],[11,"new","","",48,[[]]],[11,"append_value","","Appends a value of type `T` into the builder",48,[[]]],[11,"append_null","","Appends a null slot into the builder",48,[[]]],[11,"append_value_from_any","","",48,[[["any",8]],["result",6]]],[11,"append_option","","",48,[[["option",4]]]],[11,"finish","","",48,[[],["objectchunked",6]]],[11,"new_from_vec","polars::chunked_array","",37,[[["vec",3]]]],[11,"value","polars::chunked_array::object","",49,[[]]],[11,"get_as_any","polars::chunked_array","",37,[[],["any",8]]],[11,"rand_normal","","Create `ChunkedArray` with samples from a Normal…",37,[[],["result",6]]],[11,"rand_standard_normal","","Create `ChunkedArray` with samples from a Standard Normal…",37,[[]]],[11,"rand_uniform","","Create `ChunkedArray` with samples from a Uniform…",37,[[]]],[11,"rand_bernoulli","","Create `ChunkedArray` with samples from a Bernoulli…",37,[[],["result",6]]],[0,"strings","","",null,null],[11,"str_lengths","","Get the length of the string values.",37,[[],["uint32chunked",6]]],[11,"contains","","Check if strings contain a regex pattern",37,[[],[["booleanchunked",6],["result",6]]]],[11,"replace","","Replace the leftmost (sub)string by a regex pattern",37,[[],[["utf8chunked",6],["result",6]]]],[11,"replace_all","","Replace all (sub)strings by a regex pattern",37,[[],[["utf8chunked",6],["result",6]]]],[11,"to_lowercase","","Modify the strings to their lowercase equivalent",37,[[],["utf8chunked",6]]],[11,"to_uppercase","","Modify the strings to their uppercase equivalent",37,[[],["utf8chunked",6]]],[0,"temporal","","Traits and utilities for temporal data.",null,null],[5,"unix_time","polars::chunked_array::temporal","",null,[[],["naivedatetime",3]]],[0,"conversion","","",null,null],[5,"parse_naive_datetime_from_str","polars::chunked_array::temporal::conversion","",null,[[],[["option",4],["naivedatetime",3]]]],[5,"naive_date_to_date32","","",null,[[["naivedate",3]]]],[5,"parse_naive_date_from_str","","",null,[[],[["naivedate",3],["option",4]]]],[8,"FromNaiveTime","","",null,null],[10,"new_from_naive_time","","",50,[[]]],[10,"parse_from_str_slice","","",50,[[]]],[8,"AsNaiveTime","","",null,null],[10,"as_naive_time","","",51,[[],[["option",4],["vec",3]]]],[8,"FromNaiveDateTime","","",null,null],[10,"new_from_naive_datetime","","",52,[[]]],[10,"parse_from_str_slice","","",52,[[]]],[8,"FromNaiveDate","","",null,null],[10,"new_from_naive_date","","",53,[[]]],[10,"parse_from_str_slice","","",53,[[]]],[8,"AsNaiveDateTime","","",null,null],[10,"as_naive_datetime","","",54,[[],[["option",4],["vec",3]]]],[8,"AsNaiveDate","","",null,null],[10,"as_naive_date","","",55,[[],[["vec",3],["option",4]]]],[8,"AsDuration","","",null,null],[10,"as_duration","","",56,[[],["chunkedarray",3]]],[11,"as_date32","polars::chunked_array","",37,[[["option",4]],[["result",6],["date32chunked",6]]]],[11,"as_date64","","",37,[[["option",4]],[["result",6],["date64chunked",6]]]],[11,"year","","Extract month from underlying NaiveDateTime…",37,[[],["int32chunked",6]]],[11,"month","","Extract month from underlying NaiveDateTime…",37,[[],["uint32chunked",6]]],[11,"day","","Extract day from underlying NaiveDateTime representation.…",37,[[],["uint32chunked",6]]],[11,"hour","","Extract hour from underlying NaiveDateTime representation.…",37,[[],["uint32chunked",6]]],[11,"minute","","Extract minute from underlying NaiveDateTime…",37,[[],["uint32chunked",6]]],[11,"second","","Extract second from underlying NaiveDateTime…",37,[[],["uint32chunked",6]]],[11,"nanosecond","","Extract second from underlying NaiveDateTime…",37,[[],["uint32chunked",6]]],[11,"ordinal","","Returns the day of year starting from 1.",37,[[],["uint32chunked",6]]],[11,"year","","Extract month from underlying NaiveDateTime…",37,[[],["int32chunked",6]]],[11,"month","","Extract month from underlying NaiveDateTime…",37,[[],["uint32chunked",6]]],[11,"day","","Extract day from underlying NaiveDateTime representation.…",37,[[],["uint32chunked",6]]],[11,"ordinal","","Returns the day of year starting from 1.",37,[[],["uint32chunked",6]]],[0,"upstream_traits","","Implementations of upstream traits for ChunkedArray",null,null],[8,"Downcast","","",null,null],[10,"downcast_chunks","","",57,[[],["vec",3]]],[11,"array_data","","Get Arrow ArrayData",37,[[],[["arraydataref",6],["vec",3]]]],[11,"first_non_null","","Get the index of the first non null value in this…",37,[[],["option",4]]],[11,"null_bits","","Get the null count and the buffer of bits representing…",37,[[],["vec",3]]],[11,"unpack_series_matching_type","","Series to ChunkedArray",37,[[["series",4]],[["result",6],["chunkedarray",3]]]],[11,"len","","Combined length of all the chunks.",37,[[]]],[11,"is_empty","","Check if ChunkedArray is empty.",37,[[]]],[11,"chunk_id","","Unique id representing the number of chunks",37,[[],["vec",3]]],[11,"chunks","","A reference to the chunks",37,[[],["vec",3]]],[11,"is_optimal_aligned","","Returns true if contains a single chunk and has no null…",37,[[]]],[11,"null_count","","Count the null values.",37,[[]]],[11,"limit","","Take a view of top n elements",37,[[],["result",6]]],[11,"append_array","","Append arrow array in place.",37,[[["arrayref",6]],["result",6]]],[11,"slice","","Slice the array. The chunks are reallocated the underlying…",37,[[],["result",6]]],[11,"is_null","","Get a mask of the null values.",37,[[],["booleanchunked",6]]],[11,"is_not_null","","Get a mask of the null values.",37,[[],["booleanchunked",6]]],[11,"dtype","","Get data type of ChunkedArray.",37,[[],["arrowdatatype",4]]],[11,"head","","Get the head of the ChunkedArray",37,[[["option",4]]]],[11,"tail","","Get the tail of the ChunkedArray",37,[[["option",4]]]],[11,"append","","Append in place.",37,[[]]],[11,"name","","Name of the ChunkedArray.",37,[[]]],[11,"ref_field","","Get a reference to the field.",37,[[],["field",3]]],[11,"rename","","Rename this ChunkedArray.",37,[[]]],[11,"new_from_chunks","","Create a new ChunkedArray from existing chunks.",37,[[["arrayref",6],["vec",3]]]],[11,"new_from_aligned_vec","","Create a new ChunkedArray by taking ownership of the…",37,[[["alignedvec",3]]]],[11,"new_with_null_bitmap","","Nullify values in slice with an existing null bitmap",37,[[["option",4],["buffer",3]]]],[11,"new_from_owned_with_null_bitmap","","Nullify values in slice with an existing null bitmap",37,[[["option",4],["alignedvec",3],["buffer",3]]]],[11,"cont_slice","","Contiguous slice",37,[[],["result",6]]],[11,"data_views","","Get slices of the underlying arrow data. NOTE: null values…",37,[[],["vec",3]]],[11,"as_single_ptr","","Rechunk and return a ptr to the start of the array",37,[[]]],[11,"map","","If cont_slice is successful a closure is mapped over the…",37,[[],[["map",3],["result",6]]]],[11,"map_null_checks","","If cont_slice fails we can fallback on an iterator with…",37,[[],[["numericchunkiterdispatch",4],["map",3]]]],[11,"fold","","If cont_slice is successful a closure can be applied as…",37,[[],["result",6]]],[11,"fold_null_checks","","If cont_slice fails we can fallback on an iterator with…",37,[[]]],[0,"datatypes","polars","Data types supported by Polars.At the moment Polars…",null,null],[4,"ArrowDataType","polars::datatypes","The set of datatypes that are supported by this…",null,null],[13,"Null","","Null type",58,null],[13,"Boolean","","A boolean datatype representing the values `true` and…",58,null],[13,"Int8","","A signed 8-bit integer.",58,null],[13,"Int16","","A signed 16-bit integer.",58,null],[13,"Int32","","A signed 32-bit integer.",58,null],[13,"Int64","","A signed 64-bit integer.",58,null],[13,"UInt8","","An unsigned 8-bit integer.",58,null],[13,"UInt16","","An unsigned 16-bit integer.",58,null],[13,"UInt32","","An unsigned 32-bit integer.",58,null],[13,"UInt64","","An unsigned 64-bit integer.",58,null],[13,"Float16","","A 16-bit floating point number.",58,null],[13,"Float32","","A 32-bit floating point number.",58,null],[13,"Float64","","A 64-bit floating point number.",58,null],[13,"Timestamp","","A timestamp with an optional timezone.",58,null],[13,"Date32","","A 32-bit date representing the elapsed time since UNIX…",58,null],[13,"Date64","","A 64-bit date representing the elapsed time since UNIX…",58,null],[13,"Time32","","A 32-bit time representing the elapsed time since midnight…",58,null],[13,"Time64","","A 64-bit time representing the elapsed time since midnight…",58,null],[13,"Duration","","Measure of elapsed time in either seconds, milliseconds,…",58,null],[13,"Interval","","A \\\"calendar\\\" interval which models types that don\'t…",58,null],[13,"Binary","","Opaque binary data of variable length.",58,null],[13,"FixedSizeBinary","","Opaque binary data of fixed size. Enum parameter specifies…",58,null],[13,"LargeBinary","","Opaque binary data of variable length and 64-bit offsets.",58,null],[13,"Utf8","","A variable-length string in Unicode with UTF-8 encoding.",58,null],[13,"LargeUtf8","","A variable-length string in Unicode with UFT-8 encoding…",58,null],[13,"List","","A list of some logical data type with variable length.",58,null],[13,"FixedSizeList","","A list of some logical data type with fixed length.",58,null],[13,"LargeList","","A list of some logical data type with variable length and…",58,null],[13,"Struct","","A nested datatype that contains a number of sub-fields.",58,null],[13,"Union","","A nested datatype that can represent slots of differing…",58,null],[13,"Dictionary","","A dictionary encoded array (`key_type`, `value_type`),…",58,null],[8,"ArrowNumericType","","A subtype of primitive type that represents numeric values.",null,null],[16,"Simd","","Defines the SIMD type that should be used for this numeric…",59,null],[16,"SimdMask","","Defines the SIMD Mask type that should be used for this…",59,null],[10,"lanes","","The number of SIMD lanes available",59,[[]]],[10,"init","","Initializes a SIMD register to a constant value",59,[[]]],[10,"load","","Loads a slice into a SIMD register",59,[[]]],[10,"mask_init","","Creates a new SIMD mask for this SIMD type filling it with…",59,[[]]],[10,"mask_from_u64","","Creates a new SIMD mask for this SIMD type from the…",59,[[]]],[10,"mask_get","","Gets the value of a single lane in a SIMD mask",59,[[]]],[10,"bitmask","","Gets the bitmask for a SimdMask as a byte slice and passes…",59,[[]]],[10,"mask_set","","Sets the value of a single lane of a SIMD mask",59,[[]]],[10,"mask_select","","Selects elements of `a` and `b` using `mask`",59,[[]]],[10,"mask_any","","Returns `true` if any of the lanes in the mask are `true`",59,[[]]],[10,"bin_op","","Performs a SIMD binary operation",59,[[]]],[10,"eq","","SIMD version of equal",59,[[]]],[10,"ne","","SIMD version of not equal",59,[[]]],[10,"lt","","SIMD version of less than",59,[[]]],[10,"le","","SIMD version of less than or equal to",59,[[]]],[10,"gt","","SIMD version of greater than",59,[[]]],[10,"ge","","SIMD version of greater than or equal to",59,[[]]],[10,"write","","Writes a SIMD result back to a slice",59,[[]]],[8,"ArrowPrimitiveType","","Trait indicating a primitive fixed-width type (bool, ints…",null,null],[16,"Native","","Corresponding Rust native type for the primitive type.",60,null],[10,"get_data_type","","Returns the corresponding Arrow data type of this…",60,[[],["datatype",4]]],[11,"get_bit_width","","Returns the bit width of this primitive type.",60,[[]]],[11,"default_value","","Returns a default value of this primitive type.",60,[[]]],[11,"index","","Returns a value offset from the given pointer by the given…",60,[[]]],[3,"BooleanType","","",null,null],[3,"Date32Type","","",null,null],[3,"Date64Type","","",null,null],[4,"DateUnit","","Date is either a 32-bit or 64-bit type representing…",null,null],[13,"Day","","Days since the UNIX epoch.",61,null],[13,"Millisecond","","Milliseconds indicating UNIX time elapsed since the epoch…",61,null],[3,"DurationMicrosecondType","","",null,null],[3,"DurationMillisecondType","","",null,null],[3,"DurationNanosecondType","","",null,null],[3,"DurationSecondType","","",null,null],[3,"Float32Type","","",null,null],[3,"Float64Type","","",null,null],[3,"Int16Type","","",null,null],[3,"Int32Type","","",null,null],[3,"Int64Type","","",null,null],[3,"Int8Type","","",null,null],[3,"IntervalDayTimeType","","",null,null],[4,"IntervalUnit","","YEAR_MONTH or DAY_TIME interval in SQL style.",null,null],[13,"YearMonth","","Indicates the number of elapsed whole months, stored as…",62,null],[13,"DayTime","","Indicates the number of elapsed days and milliseconds,…",62,null],[3,"IntervalYearMonthType","","",null,null],[3,"Time32MillisecondType","","",null,null],[3,"Time32SecondType","","",null,null],[3,"Time64MicrosecondType","","",null,null],[3,"Time64NanosecondType","","",null,null],[4,"TimeUnit","","An absolute length of time in seconds, milliseconds,…",null,null],[13,"Second","","Time in seconds.",63,null],[13,"Millisecond","","Time in milliseconds.",63,null],[13,"Microsecond","","Time in microseconds.",63,null],[13,"Nanosecond","","Time in nanoseconds.",63,null],[3,"TimestampMicrosecondType","","",null,null],[3,"TimestampMillisecondType","","",null,null],[3,"TimestampNanosecondType","","",null,null],[3,"TimestampSecondType","","",null,null],[3,"UInt16Type","","",null,null],[3,"UInt32Type","","",null,null],[3,"UInt64Type","","",null,null],[3,"UInt8Type","","",null,null],[3,"Utf8Type","","",null,null],[3,"ListType","","",null,null],[3,"ObjectType","","",null,null],[4,"AnyType","","",null,null],[13,"Null","","",64,null],[13,"Boolean","","A binary true or false.",64,null],[13,"Utf8","","A UTF8 encoded string type.",64,null],[13,"UInt8","","An unsigned 8-bit integer number.",64,null],[13,"UInt16","","An unsigned 16-bit integer number.",64,null],[13,"UInt32","","An unsigned 32-bit integer number.",64,null],[13,"UInt64","","An unsigned 64-bit integer number.",64,null],[13,"Int8","","An 8-bit integer number.",64,null],[13,"Int16","","A 16-bit integer number.",64,null],[13,"Int32","","A 32-bit integer number.",64,null],[13,"Int64","","A 64-bit integer number.",64,null],[13,"Float32","","A 32-bit floating point number.",64,null],[13,"Float64","","A 64-bit floating point number.",64,null],[13,"Date32","","A 32-bit date representing the elapsed time since UNIX…",64,null],[13,"Date64","","A 64-bit date representing the elapsed time since UNIX…",64,null],[13,"Time64","","A 64-bit time representing the elapsed time since midnight…",64,null],[13,"Time32","","A 32-bit time representing the elapsed time since midnight…",64,null],[13,"Duration","","Measure of elapsed time in either seconds, milliseconds,…",64,null],[13,"TimeStamp","","Naive Time elapsed from the Unix epoch, 00:00:00.000 on 1…",64,null],[13,"IntervalDayTime","","A \\\"calendar\\\" interval which models types that don\'t…",64,null],[13,"IntervalYearMonth","","",64,null],[13,"List","","",64,null],[13,"Object","","Use as_any to get a dyn Any",64,null],[6,"ObjectChunked","","",null,null],[6,"ListChunked","","",null,null],[6,"BooleanChunked","","",null,null],[6,"UInt8Chunked","","",null,null],[6,"UInt16Chunked","","",null,null],[6,"UInt32Chunked","","",null,null],[6,"UInt64Chunked","","",null,null],[6,"Int8Chunked","","",null,null],[6,"Int16Chunked","","",null,null],[6,"Int32Chunked","","",null,null],[6,"Int64Chunked","","",null,null],[6,"Float32Chunked","","",null,null],[6,"Float64Chunked","","",null,null],[6,"Utf8Chunked","","",null,null],[6,"Date32Chunked","","",null,null],[6,"Date64Chunked","","",null,null],[6,"DurationNanosecondChunked","","",null,null],[6,"DurationMicrosecondChunked","","",null,null],[6,"DurationMillisecondChunked","","",null,null],[6,"DurationSecondChunked","","",null,null],[6,"Time64NanosecondChunked","","",null,null],[6,"Time64MicrosecondChunked","","",null,null],[6,"Time32MillisecondChunked","","",null,null],[6,"Time32SecondChunked","","",null,null],[6,"IntervalDayTimeChunked","","",null,null],[6,"IntervalYearMonthChunked","","",null,null],[6,"TimestampNanosecondChunked","","",null,null],[6,"TimestampMicrosecondChunked","","",null,null],[6,"TimestampMillisecondChunked","","",null,null],[6,"TimestampSecondChunked","","",null,null],[8,"PolarsDataType","","",null,null],[10,"get_data_type","","",65,[[],["arrowdatatype",4]]],[8,"PolarsSingleType","","Any type that is not nested",null,null],[8,"PolarsPrimitiveType","","",null,null],[8,"PolarsNumericType","","",null,null],[8,"PolarsIntegerType","","",null,null],[8,"PolarsFloatType","","",null,null],[8,"ToStr","","",null,null],[10,"to_str","","",66,[[],["string",3]]],[0,"doc","polars","Other documentation",null,null],[0,"changelog","polars::doc","",null,null],[0,"v0_3","polars::doc::changelog","Changelog v0.3Utf8 type is nullable #37Support all ARROW…",null,null],[0,"v0_4","","Changelog v0.4median aggregation added to…",null,null],[0,"v0_5","","Changelog v0.5`DataFrame.column` returns `Result<_>`…",null,null],[0,"v0_6","","Changelog v0.6Add more distributions for random…",null,null],[0,"v0_7","","Changelog v0.7More group by…",null,null],[0,"v0_8","","Changelog v0.8Upgrade to Arrow 2.0Add quantile aggregation…",null,null],[0,"v0_9","","Changelog v0.9CSV Read IOlarge performance…",null,null],[0,"time","polars::doc","DateTime related functionalityPolars supports all data…",null,null],[0,"error","polars","",null,null],[4,"PolarsError","polars::error","",null,null],[13,"ArrowError","","",67,null],[13,"InvalidOperation","","",67,null],[13,"DataTypeMisMatch","","",67,null],[13,"NotFound","","",67,null],[13,"ShapeMisMatch","","",67,null],[13,"Other","","",67,null],[13,"OutOfBounds","","",67,null],[13,"NoSlice","","",67,null],[13,"NoData","","",67,null],[13,"ValueError","","",67,null],[13,"MemoryNotAligned","","",67,null],[13,"ParquetError","","",67,null],[13,"RandError","","",67,null],[13,"HasNullValues","","",67,null],[13,"UnknownSchema","","",67,null],[13,"Various","","",67,null],[13,"IO","","",67,null],[13,"Regex","","",67,null],[13,"Duplicate","","",67,null],[6,"Result","","",null,null],[0,"frame","polars","DataFrame module.",null,null],[3,"DataFrame","polars::frame","",null,null],[3,"RecordBatchIter","","",null,null],[0,"explode","","",null,null],[11,"explode","polars::chunked_array","",37,[[],["result",6]]],[11,"explode","polars::frame::explode","",68,[[],["result",6]]],[11,"explode","polars::frame","Explode `DataFrame` to long format by exploding a column…",69,[[],[["dataframe",3],["result",6]]]],[11,"melt","","Unpivot a `DataFrame` from wide to long format.",69,[[["selection",8],["selection",8]],["result",6]]],[0,"group_by","","",null,null],[3,"GroupBy","polars::frame::group_by","Returned by a groupby operation on a DataFrame. This…",null,null],[3,"Pivot","","Intermediate structure when a `pivot` operation is…",null,null],[8,"IntoGroupTuples","","Used to create the tuples for a groupby operation.",null,null],[11,"group_tuples","","Create the tuples need for a groupby operation. * The…",70,[[],["vec",3]]],[11,"groupby","polars::frame","Group DataFrame using a Series column.",69,[[["selection",8]],[["result",6],["groupby",3]]]],[11,"select","polars::frame::group_by","Select the column(s) that should be aggregated. You can…",71,[[]]],[11,"get_groups","","Get the internal representation of the GroupBy operation.…",71,[[],["vec",3]]],[11,"mean","","Aggregate grouped series and compute the mean per group.",71,[[],[["dataframe",3],["result",6]]]],[11,"sum","","Aggregate grouped series and compute the sum per group.",71,[[],[["dataframe",3],["result",6]]]],[11,"min","","Aggregate grouped series and compute the minimal value per…",71,[[],[["dataframe",3],["result",6]]]],[11,"max","","Aggregate grouped series and compute the maximum value per…",71,[[],[["dataframe",3],["result",6]]]],[11,"first","","Aggregate grouped `Series` and find the first value per…",71,[[],[["dataframe",3],["result",6]]]],[11,"last","","Aggregate grouped `Series` and return the last value per…",71,[[],[["dataframe",3],["result",6]]]],[11,"n_unique","","Aggregate grouped `Series` by counting the number of…",71,[[],[["dataframe",3],["result",6]]]],[11,"quantile","","Aggregate grouped `Series` and determine the quantile per…",71,[[],[["dataframe",3],["result",6]]]],[11,"median","","Aggregate grouped `Series` and determine the median per…",71,[[],[["dataframe",3],["result",6]]]],[11,"count","","Aggregate grouped series and compute the number of values…",71,[[],[["dataframe",3],["result",6]]]],[11,"groups","","Get the groupby group indexes.",71,[[],[["dataframe",3],["result",6]]]],[11,"agg","","Combine different aggregations on columns",71,[[],[["dataframe",3],["result",6]]]],[11,"agg_list","","Aggregate the groups of the groupby operation into lists.",71,[[],[["dataframe",3],["result",6]]]],[11,"pivot","","Pivot a column of the current `DataFrame` and perform one…",71,[[],["pivot",3]]],[11,"count","","Aggregate the pivot results by taking the count the values.",72,[[],[["dataframe",3],["result",6]]]],[11,"first","","Aggregate the pivot results by taking the first occurring…",72,[[],[["dataframe",3],["result",6]]]],[11,"sum","","Aggregate the pivot results by taking the sum of all…",72,[[],[["dataframe",3],["result",6]]]],[11,"min","","Aggregate the pivot results by taking the minimal value of…",72,[[],[["dataframe",3],["result",6]]]],[11,"max","","Aggregate the pivot results by taking the maximum value of…",72,[[],[["dataframe",3],["result",6]]]],[11,"mean","","Aggregate the pivot results by taking the mean value of…",72,[[],[["dataframe",3],["result",6]]]],[11,"median","","Aggregate the pivot results by taking the median value of…",72,[[],[["dataframe",3],["result",6]]]],[0,"hash_join","polars::frame","",null,null],[8,"HashJoin","polars::frame::hash_join","",null,null],[10,"hash_join_inner","","",73,[[["chunkedarray",3]],["vec",3]]],[10,"hash_join_left","","",73,[[["chunkedarray",3]],["vec",3]]],[10,"hash_join_outer","","",73,[[["chunkedarray",3]],["vec",3]]],[8,"ZipOuterJoinColumn","","",null,null],[11,"zip_outer_join_column","","",74,[[["series",4]],["series",4]]],[11,"inner_join","polars::frame","Perform an inner join on two DataFrames.",69,[[["dataframe",3]],[["dataframe",3],["result",6]]]],[11,"left_join","","Perform a left join on two DataFrames",69,[[["dataframe",3]],[["dataframe",3],["result",6]]]],[11,"outer_join","","Perform an outer join on two DataFrames",69,[[["dataframe",3]],[["dataframe",3],["result",6]]]],[0,"select","","",null,null],[8,"Selection","polars::frame::select","",null,null],[10,"to_selection_vec","","",75,[[],["vec",3]]],[0,"ser","polars::frame","",null,null],[5,"finish_reader","polars::frame::ser","",null,[[["arrowreader",8],["option",4]],[["dataframe",3],["result",6]]]],[0,"csv","","(De)serializing CSV filesWrite a DataFrame to a csv…",null,null],[3,"WriterBuilder","polars::frame::ser::csv","A CSV writer builder",null,null],[3,"CsvWriter","","Write a DataFrame to csv.",null,null],[3,"CsvReader","","Create a new DataFrame by reading a csv file.",null,null],[4,"CsvEncoding","","",null,null],[13,"Utf8","","",76,null],[13,"LossyUtf8","","",76,null],[11,"has_headers","","Set whether to write headers",77,[[]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",77,[[]]],[11,"with_date_format","","Set the CSV file\'s date format",77,[[["string",3]]]],[11,"with_time_format","","Set the CSV file\'s time format",77,[[["string",3]]]],[11,"with_timestamp_format","","Set the CSV file\'s timestamp formatch array in",77,[[["string",3]]]],[11,"with_batch_size","","Set the size of the write buffers. Batch size is the…",77,[[]]],[11,"with_encoding","","",78,[[["csvencoding",4]]]],[11,"with_stop_after_n_rows","","Stop parsing when `n` rows are parsed. By settings this…",78,[[["option",4]]]],[11,"with_schema","","Set the CSV file\'s schema",78,[[["schema",3],["arc",3]]]],[11,"with_skip_rows","","Skip the first `n` rows during parsing.",78,[[]]],[11,"with_rechunk","","Rechunk the DataFrame to contiguous memory after the CSV…",78,[[]]],[11,"has_header","","Set whether the CSV file has headers",78,[[]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",78,[[]]],[11,"infer_schema","","Set the CSV reader to infer the schema of the file",78,[[["option",4]]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",78,[[]]],[11,"with_projection","","Set the reader\'s column projection",78,[[["option",4],["vec",3]]]],[11,"with_columns","","Columns to select/ project",78,[[["vec",3],["option",4]]]],[11,"with_one_thread","","Use single threaded CSV parsing (this is default). This is…",78,[[]]],[0,"ipc","polars::frame::ser","(De)serializing Arrows IPC format.Arrow IPC is a binary…",null,null],[3,"IPCReader","polars::frame::ser::ipc","Read Arrows IPC format into a DataFrame",null,null],[3,"IPCWriter","","Write a DataFrame to Arrow\'s IPC format",null,null],[11,"with_batch_size","","Set the size of the write buffer. Batch size is the amount…",79,[[]]],[0,"json","polars::frame::ser","(De)serialize JSON files.Read JSON to a DataFrameExample",null,null],[3,"ReaderBuilder","polars::frame::ser::json","JSON file reader builder",null,null],[3,"JsonReader","","",null,null],[11,"with_schema","","Set the JSON file\'s schema",80,[[["schema",3],["arc",3]]]],[11,"infer_schema","","Set the JSON reader to infer the schema of the file",80,[[["option",4]]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)…",80,[[]]],[11,"with_projection","","Set the reader\'s column projection",80,[[["string",3],["vec",3]]]],[0,"parquet","polars::frame::ser","Reading Apache parquet files.Example",null,null],[3,"ParquetReader","polars::frame::ser::parquet","Read Apache parquet format into a DataFrame.",null,null],[8,"SerReader","polars::frame::ser","",null,null],[10,"new","","",81,[[]]],[11,"set_rechunk","","Rechunk to a single chunk after Reading file.",81,[[]]],[10,"with_ignore_parser_errors","","Continue with next batch when a ParserError is encountered.",81,[[]]],[10,"finish","","Take the SerReader and return a parsed DataFrame.",81,[[],[["dataframe",3],["result",6]]]],[8,"SerWriter","","",null,null],[10,"new","","",82,[[]]],[10,"finish","","",82,[[["dataframe",3]],["result",6]]],[8,"ArrowReader","","",null,null],[10,"next_record_batch","","",83,[[],[["arrowresult",6],["option",4]]]],[10,"schema","","",83,[[],[["schema",3],["arc",3]]]],[8,"IntoSeries","polars::frame","",null,null],[10,"into_series","","",84,[[],["series",4]]],[11,"new","","Create a DataFrame from a Vector of Series.",69,[[["intoseries",8],["vec",3]],["result",6]]],[11,"agg_chunks","","Aggregate all chunks to contiguous memory.",69,[[]]],[11,"schema","","Get a reference to the DataFrame schema.",69,[[],["schema",3]]],[11,"get_columns","","Get a reference to the DataFrame columns.",69,[[],["vec",3]]],[11,"columns","","Get the column labels of the DataFrame.",69,[[],["vec",3]]],[11,"get_column_names","","",69,[[],["vec",3]]],[11,"set_column_names","","Set the column names.",69,[[],["result",6]]],[11,"dtypes","","Get the data types of the columns in the DataFrame.",69,[[],[["arrowdatatype",4],["vec",3]]]],[11,"n_chunks","","The number of chunks per column",69,[[],["result",6]]],[11,"fields","","Get a reference to the schema fields of the DataFrame.",69,[[],[["vec",3],["field",3]]]],[11,"shape","","Get (width x height)",69,[[]]],[11,"width","","Get width of DataFrame",69,[[]]],[11,"height","","Get height of DataFrame",69,[[]]],[11,"hstack_mut","","Add multiple Series to a DataFrame This expects the Series…",69,[[],["result",6]]],[11,"hstack","","",69,[[],["result",6]]],[11,"vstack","","Concatenate a DataFrame to this DataFrame",69,[[["dataframe",3]],["result",6]]],[11,"drop_in_place","","Remove column by name",69,[[],[["result",6],["series",4]]]],[11,"drop_nulls","","Return a new DataFrame where all null values are dropped",69,[[["option",4]],["result",6]]],[11,"drop","","Drop a column by name. This is a pure method and will…",69,[[],["result",6]]],[11,"insert_at_idx","","Insert a new column at a given index",69,[[["intoseries",8]],["result",6]]],[11,"add_column","","Add a new column to this `DataFrame`.",69,[[["intoseries",8]],["result",6]]],[11,"with_column","","Create a new `DataFrame` with the column added.",69,[[["intoseries",8]],["result",6]]],[11,"get","","Get a row in the `DataFrame` Beware this is slow.",69,[[],[["option",4],["vec",3]]]],[11,"select_at_idx","","Select a series by index.",69,[[],[["option",4],["series",4]]]],[11,"find_idx_by_name","","Get column index of a series by name.",69,[[],["option",4]]],[11,"column","","Select a single column by name.",69,[[],[["result",6],["series",4]]]],[11,"select","","Select column(s) from this DataFrame and return a new…",69,[[],["result",6]]],[11,"select_series","","Select column(s) from this DataFrame and return them into…",69,[[],[["result",6],["vec",3]]]],[11,"filter","","Take DataFrame rows by a boolean mask.",69,[[["booleanchunked",6]],["result",6]]],[11,"take_iter","","Take DataFrame value by indexes from an iterator.",69,[[["option",4]]]],[11,"take_iter_unchecked","","Take DataFrame values by indexes from an iterator.",69,[[["option",4]]]],[11,"take_iter_unchecked_bounds","","Take DataFrame values by indexes from an iterator.",69,[[["option",4]]]],[11,"take_opt_iter","","Take DataFrame values by indexes from an iterator that may…",69,[[["option",4]]]],[11,"take_opt_iter_unchecked_bounds","","Take DataFrame values by indexes from an iterator that may…",69,[[["option",4]]]],[11,"take_opt_iter_unchecked","","Take DataFrame values by indexes from an iterator that may…",69,[[["option",4]]]],[11,"take","","Take DataFrame rows by index values.",69,[[]]],[11,"rename","","Rename a column in the DataFrame",69,[[],["result",6]]],[11,"sort_in_place","","Sort DataFrame in place by a column.",69,[[],["result",6]]],[11,"sort","","Return a sorted clone of this DataFrame.",69,[[],["result",6]]],[11,"replace","","Replace a column with a series.",69,[[["intoseries",8]],["result",6]]],[11,"replace_at_idx","","Replace column at index `idx` with a series.",69,[[["intoseries",8]],["result",6]]],[11,"apply","","Apply a closure to a column. This is the recommended way…",69,[[],["result",6]]],[11,"apply_at_idx","","Apply a closure to a column at index `idx`. This is the…",69,[[],["result",6]]],[11,"may_apply_at_idx","","Apply a closure that may fail to a column at index `idx`.…",69,[[],["result",6]]],[11,"may_apply","","Apply a closure that may fail to a column. This is the…",69,[[],["result",6]]],[11,"slice","","Slice the DataFrame along the rows.",69,[[],["result",6]]],[11,"head","","Get the head of the DataFrame",69,[[["option",4]]]],[11,"tail","","Get the tail of the DataFrame",69,[[["option",4]]]],[11,"as_record_batches","","Transform the underlying chunks in the DataFrame to Arrow…",69,[[],[["result",6],["vec",3]]]],[11,"iter_record_batches","","Iterator over the rows in this DataFrame as Arrow…",69,[[]]],[11,"reverse","","Get a DataFrame with all the columns in reversed order",69,[[]]],[11,"shift","","Shift the values by a given period and fill the parts that…",69,[[],["result",6]]],[11,"fill_none","","Replace None values with one of the following strategies:",69,[[["fillnonestrategy",4]],["result",6]]],[11,"max","","Aggregate the columns to their maximum values.",69,[[]]],[11,"std","","Aggregate the columns to their standard deviation values.",69,[[]]],[11,"var","","Aggregate the columns to their variation values.",69,[[]]],[11,"min","","Aggregate the columns to their minimum values.",69,[[]]],[11,"sum","","Aggregate the columns to their sum values.",69,[[]]],[11,"mean","","Aggregate the columns to their mean values.",69,[[]]],[11,"median","","Aggregate the columns to their median values.",69,[[]]],[11,"quantile","","Aggregate the columns to their quantile values.",69,[[],["result",6]]],[11,"pipe","","Pipe different functions/ closure operations that work on…",69,[[],["result",6]]],[11,"pipe_mut","","Pipe different functions/ closure operations that work on…",69,[[],["result",6]]],[11,"pipe_with_args","","Pipe different functions/ closure operations that work on…",69,[[],["result",6]]],[11,"to_dummies","","Create dummy variables.",69,[[],["result",6]]],[11,"drop_duplicates","","Drop duplicate rows from a DataFrame. This fails when…",69,[[["option",4]],["result",6]]],[11,"is_unique","","Get a mask of all the unique rows in the DataFrame.",69,[[],[["booleanchunked",6],["result",6]]]],[11,"is_duplicated","","Get a mask of all the duplicated rows in the DataFrame.",69,[[],[["booleanchunked",6],["result",6]]]],[0,"lazy","polars","Lazy API of Polars",null,null],[0,"dsl","polars::lazy","Domain specific language for the Lazy api.",null,null],[3,"When","polars::lazy::dsl","",null,null],[3,"WhenThen","","",null,null],[4,"Expr","","Queries consists of multiple expressions.",null,null],[13,"Alias","","",85,null],[13,"Column","","",85,null],[13,"Literal","","",85,null],[13,"BinaryExpr","","",85,null],[12,"left","polars::lazy::dsl::Expr","",86,null],[12,"op","","",86,null],[12,"right","","",86,null],[13,"Not","polars::lazy::dsl","",85,null],[13,"IsNotNull","","",85,null],[13,"IsNull","","",85,null],[13,"Cast","","",85,null],[12,"expr","polars::lazy::dsl::Expr","",87,null],[12,"data_type","","",87,null],[13,"Sort","polars::lazy::dsl","",85,null],[12,"expr","polars::lazy::dsl::Expr","",88,null],[12,"reverse","","",88,null],[13,"AggMin","polars::lazy::dsl","",85,null],[13,"AggMax","","",85,null],[13,"AggMedian","","",85,null],[13,"AggNUnique","","",85,null],[13,"AggFirst","","",85,null],[13,"AggLast","","",85,null],[13,"AggMean","","",85,null],[13,"AggList","","",85,null],[13,"AggCount","","",85,null],[13,"AggQuantile","","",85,null],[12,"expr","polars::lazy::dsl::Expr","",89,null],[12,"quantile","","",89,null],[13,"AggSum","polars::lazy::dsl","",85,null],[13,"AggGroups","","",85,null],[13,"Ternary","","",85,null],[12,"predicate","polars::lazy::dsl::Expr","",90,null],[12,"truthy","","",90,null],[12,"falsy","","",90,null],[13,"Apply","polars::lazy::dsl","",85,null],[12,"input","polars::lazy::dsl::Expr","",91,null],[12,"function","","",91,null],[12,"output_type","","",91,null],[13,"Shift","polars::lazy::dsl","",85,null],[12,"input","polars::lazy::dsl::Expr","",92,null],[12,"periods","","",92,null],[13,"Wildcard","polars::lazy::dsl","",85,null],[4,"Operator","","",null,null],[13,"Eq","","",93,null],[13,"NotEq","","",93,null],[13,"Lt","","",93,null],[13,"LtEq","","",93,null],[13,"Gt","","",93,null],[13,"GtEq","","",93,null],[13,"Plus","","",93,null],[13,"Minus","","",93,null],[13,"Multiply","","",93,null],[13,"Divide","","",93,null],[13,"Modulus","","",93,null],[13,"And","","",93,null],[13,"Or","","",93,null],[13,"Not","","",93,null],[13,"Like","","",93,null],[13,"NotLike","","",93,null],[5,"binary_expr","","",null,[[["operator",4],["expr",4]],["expr",4]]],[5,"when","","Start a when-then-otherwise expression",null,[[["expr",4]],["when",3]]],[5,"ternary_expr","","",null,[[["expr",4]],["expr",4]]],[5,"col","","Create a Column Expression based on a column name.",null,[[],["expr",4]]],[5,"lit","","Create a Literal Expression from `L`",null,[[["literal",8]],["expr",4]]],[5,"not","","Not expression.",null,[[["expr",4]],["expr",4]]],[5,"is_null","","IsNull expression",null,[[["expr",4]],["expr",4]]],[5,"is_not_null","","IsNotNull expression.",null,[[["expr",4]],["expr",4]]],[5,"cast","","Cast expression.",null,[[["expr",4],["arrowdatatype",4]],["expr",4]]],[8,"Udf","","",null,null],[10,"call_udf","","",94,[[["series",4]],[["result",6],["series",4]]]],[8,"Literal","","",null,null],[10,"lit","","Literal expression.",95,[[],["expr",4]]],[11,"get_type","","Get DataType result of the expression. The schema is the…",85,[[["schema",3]],[["result",6],["arrowdatatype",4]]]],[11,"then","","",96,[[["expr",4]],["whenthen",3]]],[11,"otherwise","","",97,[[["expr",4]],["expr",4]]],[11,"eq","","Compare `Expr` with other `Expr` on equality",85,[[["expr",4]],["expr",4]]],[11,"neq","","Compare `Expr` with other `Expr` on non-equality",85,[[["expr",4]],["expr",4]]],[11,"lt","","Check if `Expr` < `Expr`",85,[[["expr",4]],["expr",4]]],[11,"gt","","Check if `Expr` > `Expr`",85,[[["expr",4]],["expr",4]]],[11,"gt_eq","","Check if `Expr` >= `Expr`",85,[[["expr",4]],["expr",4]]],[11,"lt_eq","","Check if `Expr` <= `Expr`",85,[[["expr",4]],["expr",4]]],[11,"not","","Negate `Expr`",85,[[],["expr",4]]],[11,"alias","","Rename Column.",85,[[],["expr",4]]],[11,"is_null","","Run is_null operation on `Expr`.",85,[[]]],[11,"is_not_null","","Run is_not_null operation on `Expr`.",85,[[]]],[11,"agg_min","","Reduce groups to minimal value.",85,[[]]],[11,"agg_max","","Reduce groups to maximum value.",85,[[]]],[11,"agg_mean","","Reduce groups to the mean value.",85,[[]]],[11,"agg_median","","Reduce groups to the median value.",85,[[]]],[11,"agg_sum","","Reduce groups to the sum of all the values.",85,[[]]],[11,"agg_n_unique","","Get the number of unique values in the groups.",85,[[]]],[11,"agg_first","","Get the first value in the group.",85,[[]]],[11,"agg_last","","Get the last value in the group.",85,[[]]],[11,"agg_list","","Aggregate the group to a Series",85,[[]]],[11,"agg_quantile","","Compute the quantile per group.",85,[[]]],[11,"agg_groups","","Get the group indexes of the group by operation.",85,[[]]],[11,"agg_count","","Get counts of the group by operation.",85,[[]]],[11,"cast","","Cast expression to another data type.",85,[[["arrowdatatype",4]]]],[11,"sort","","Sort expression. See the eager implementation.",85,[[]]],[11,"apply","","Apply a function/closure once the logical plan get…",85,[[["option",4],["arrowdatatype",4]]]],[11,"shift","","Shift the values in the array by some period. See the…",85,[[]]],[11,"fill_none","","Shift the values in the array by some period. See the…",85,[[["fillnonestrategy",4]]]],[11,"max","","Get the maximum value of the Series.",85,[[]]],[11,"min","","Get the minimum value of the Series.",85,[[]]],[11,"sum","","Get the sum value of the Series.",85,[[]]],[11,"mean","","Get the mean value of the Series.",85,[[]]],[11,"median","","Get the median value of the Series.",85,[[]]],[11,"quantile","","Get the quantile value of the Series.",85,[[]]],[11,"is_duplicated","","Get a mask of duplicated values",85,[[]]],[11,"is_unique","","Get a mask of unique values",85,[[]]],[11,"and","","and operation",85,[[["expr",4]]]],[0,"frame","polars::lazy","Lazy variant of a DataFrame.",null,null],[3,"LazyFrame","polars::lazy::frame","Lazy abstraction over an eager `DataFrame`. It really is…",null,null],[3,"LazyGroupBy","","Utility struct for lazy groupby operation.",null,null],[11,"lazy","polars::frame","Convert the `DataFrame` into a lazy `DataFrame`",69,[[],["lazyframe",3]]],[11,"with_projection_pushdown_optimization","polars::lazy::frame","Toggle projection pushdown optimization on or off.",98,[[]]],[11,"with_predicate_pushdown_optimization","","Toggle predicate pushdown optimization on or off.",98,[[]]],[11,"with_type_coercion_optimization","","Toggle type coercion optimization on or off.",98,[[]]],[11,"with_simplify_expr_optimization","","Toggle expression simplification optimization on or off",98,[[]]],[11,"describe_plan","","Describe the logical plan.",98,[[],["string",3]]],[11,"describe_optimized_plan","","Describe the optimized logical plan.",98,[[],[["result",6],["string",3]]]],[11,"sort","","Add a sort operation to the logical plan.",98,[[]]],[11,"reverse","","Reverse the DataFrame",98,[[]]],[11,"shift","","Shift the values by a given period and fill the parts that…",98,[[]]],[11,"collect","","Execute all the lazy operations and collect them into a…",98,[[],[["dataframe",3],["result",6]]]],[11,"filter","","Filter by some predicate expression.",98,[[["expr",4]]]],[11,"select","","Select (and rename) columns from the query.",98,[[["asref",8]]]],[11,"groupby","","Group by and aggregate.",98,[[["selection",8]],["lazygroupby",3]]],[11,"left_join","","Join query with other lazy query.",98,[[["expr",4],["lazyframe",3]],["lazyframe",3]]],[11,"outer_join","","Join query with other lazy query.",98,[[["expr",4],["lazyframe",3]],["lazyframe",3]]],[11,"inner_join","","Join query with other lazy query.",98,[[["expr",4],["lazyframe",3]],["lazyframe",3]]],[11,"with_column","","Add a column to a DataFrame",98,[[["expr",4]],["lazyframe",3]]],[11,"with_columns","","Add multiple columns to a DataFrame.",98,[[["expr",4],["vec",3]],["lazyframe",3]]],[11,"max","","Aggregate all the columns as their maximum values.",98,[[],["lazyframe",3]]],[11,"min","","Aggregate all the columns as their minimum values.",98,[[],["lazyframe",3]]],[11,"sum","","Aggregate all the columns as their sum values.",98,[[],["lazyframe",3]]],[11,"mean","","Aggregate all the columns as their mean values.",98,[[],["lazyframe",3]]],[11,"median","","Aggregate all the columns as their median values.",98,[[],["lazyframe",3]]],[11,"quantile","","Aggregate all the columns as their quantile values.",98,[[],["lazyframe",3]]],[11,"explode","","Apply explode operation. See eager explode.",98,[[],["lazyframe",3]]],[11,"drop_duplicates","","Drop duplicate rows. See eager.",98,[[["vec",3],["option",4]],["lazyframe",3]]],[11,"drop_nulls","","Drop null rows. See eager.",98,[[["vec",3],["option",4]],["lazyframe",3]]],[11,"agg","","Group by and aggregate.",99,[[["expr",4],["vec",3]],["lazyframe",3]]],[0,"prelude","polars","Everything you need to get started with Polars.",null,null],[8,"ArrowPrimitiveType","polars::prelude","Trait indicating a primitive fixed-width type (bool, ints…",null,null],[16,"Native","","Corresponding Rust native type for the primitive type.",60,null],[10,"get_data_type","","Returns the corresponding Arrow data type of this…",60,[[],["datatype",4]]],[11,"get_bit_width","","Returns the bit width of this primitive type.",60,[[]]],[11,"default_value","","Returns a default value of this primitive type.",60,[[]]],[11,"index","","Returns a value offset from the given pointer by the given…",60,[[]]],[3,"Field","","Contains the meta-data for a single relative type.",null,null],[3,"Schema","","Describes the meta-data of an ordered sequence of relative…",null,null],[3,"NumTakeRandomChunked","","",null,null],[3,"NumTakeRandomCont","","",null,null],[4,"InitFold","","",null,null],[13,"Zero","","",100,null],[13,"Max","","",100,null],[13,"Min","","",100,null],[8,"ChunkOps","","",null,null],[10,"rechunk","","Aggregate to chunk id. A chunk id is a vector of the chunk…",101,[[["option",4]],["result",6]]],[10,"optional_rechunk","","Only rechunk if lhs and rhs don\'t match",101,[[["chunkedarray",3]],[["result",6],["option",4]]]],[8,"AsTakeIndex","","",null,null],[10,"as_take_iter","","",102,[[],[["box",3],["iterator",8]]]],[11,"as_opt_take_iter","","",102,[[],[["box",3],["iterator",8]]]],[10,"take_index_len","","",102,[[]]],[8,"IntoTakeRandom","","Create a type that implements a faster `TakeRandom`.",null,null],[16,"Item","","",103,null],[16,"TakeRandom","","",103,null],[10,"take_rand","","Create a type that implements `TakeRandom`.",103,[[]]],[8,"LhsNumOps","","",null,null],[16,"Output","","",104,null],[10,"add","","",104,[[["series",4]]]],[10,"sub","","",104,[[["series",4]]]],[10,"div","","",104,[[["series",4]]]],[10,"mul","","",104,[[["series",4]]]],[8,"NumOpsDispatch","","",null,null],[11,"subtract","","",105,[[["series",4]],[["result",6],["series",4]]]],[11,"add_to","","",105,[[["series",4]],[["result",6],["series",4]]]],[11,"multiply","","",105,[[["series",4]],[["result",6],["series",4]]]],[11,"divide","","",105,[[["series",4]],[["result",6],["series",4]]]],[11,"remainder","","",105,[[["series",4]],[["result",6],["series",4]]]],[0,"series","polars","Type agnostic columnar data structure.",null,null],[4,"Series","polars::series","SeriesThe columnar data type for a DataFrame. The Series…",null,null],[13,"UInt8","","",106,null],[13,"UInt16","","",106,null],[13,"UInt32","","",106,null],[13,"UInt64","","",106,null],[13,"Int8","","",106,null],[13,"Int16","","",106,null],[13,"Int32","","",106,null],[13,"Int64","","",106,null],[13,"Float32","","",106,null],[13,"Float64","","",106,null],[13,"Utf8","","",106,null],[13,"Bool","","",106,null],[13,"Date32","","",106,null],[13,"Date64","","",106,null],[13,"Time32Millisecond","","",106,null],[13,"Time32Second","","",106,null],[13,"Time64Nanosecond","","",106,null],[13,"Time64Microsecond","","",106,null],[13,"DurationNanosecond","","",106,null],[13,"DurationMicrosecond","","",106,null],[13,"DurationMillisecond","","",106,null],[13,"DurationSecond","","",106,null],[13,"IntervalDayTime","","",106,null],[13,"IntervalYearMonth","","",106,null],[13,"TimestampNanosecond","","",106,null],[13,"TimestampMicrosecond","","",106,null],[13,"TimestampMillisecond","","",106,null],[13,"TimestampSecond","","",106,null],[13,"List","","",106,null],[13,"Object","","",106,null],[11,"sum","","Returns `None` if the array is empty or only contains null…",106,[[],["option",4]]],[11,"min","","Returns the minimum value in the array, according to the…",106,[[],["option",4]]],[11,"max","","Returns the maximum value in the array, according to the…",106,[[],["option",4]]],[11,"mean","","",106,[[],["option",4]]],[11,"subtract","polars::prelude","",105,[[["series",4]],[["result",6],["series",4]]]],[11,"add_to","","",105,[[["series",4]],[["result",6],["series",4]]]],[11,"multiply","","",105,[[["series",4]],[["result",6],["series",4]]]],[11,"divide","","",105,[[["series",4]],[["result",6],["series",4]]]],[11,"remainder","","",105,[[["series",4]],[["result",6],["series",4]]]],[0,"ops","polars::series","",null,null],[8,"SeriesOps","polars::series::ops","",null,null],[10,"ref_field","","",107,[[],["field",3]]],[10,"fmt_list","","",107,[[],["string",3]]],[10,"append","","",107,[[["seriesops",8]]]],[10,"rename","","",107,[[]]],[10,"chunk_id","","",107,[[],["vec",3]]],[10,"fill_none","","",107,[[["fillnonestrategy",4]],[["result",6],["box",3]]]],[10,"is_null","","",107,[[],["booleanchunked",6]]],[10,"is_not_null","","",107,[[],["booleanchunked",6]]],[10,"zip_with_series","","",107,[[["booleanchunked",6],["series",4]],[["result",6],["box",3]]]],[10,"shift","","",107,[[["option",4]],[["result",6],["box",3]]]],[10,"name","","",107,[[]]],[10,"get_any","","",107,[[],["anytype",4]]],[10,"get_as_any","","",107,[[],["any",8]]],[10,"rechunk","","",107,[[["option",4]],[["result",6],["box",3]]]],[10,"reverse","","",107,[[],[["seriesops",8],["box",3]]]],[10,"null_count","","",107,[[]]],[10,"head","","",107,[[["option",4]],[["seriesops",8],["box",3]]]],[10,"tail","","",107,[[["option",4]],[["seriesops",8],["box",3]]]],[10,"len","","",107,[[]]],[10,"is_empty","","",107,[[]]],[10,"chunks","","",107,[[],["vec",3]]],[10,"chunks_mut","","",107,[[],["vec",3]]],[10,"dtype","","",107,[[],["arrowdatatype",4]]],[10,"agg_n_unique","","",107,[[],[["option",4],["uint32chunked",6]]]],[10,"agg_first","","",107,[[],["series",4]]],[10,"take","","",107,[[["iterator",8],["option",4]],[["seriesops",8],["box",3]]]],[10,"take_unchecked","","",107,[[["iterator",8],["option",4]],[["seriesops",8],["box",3]]]],[10,"take_opt","","",107,[[["option",4],["iterator",8]],[["seriesops",8],["box",3]]]],[10,"take_opt_unchecked","","",107,[[["option",4],["iterator",8]],[["seriesops",8],["box",3]]]],[10,"expand_at_index","","",107,[[],[["seriesops",8],["box",3]]]],[10,"filter","","",107,[[["booleanchunked",6]],[["result",6],["box",3]]]],[10,"limit","","",107,[[],[["result",6],["box",3]]]],[10,"slice","","",107,[[],[["result",6],["box",3]]]],[10,"clone","","",107,[[],[["seriesops",8],["box",3]]]],[8,"NamedFrom","polars::series","",null,null],[10,"new","","Initialize by name and values.",108,[[]]],[11,"array_data","","Get Arrow ArrayData",106,[[],[["arraydataref",6],["vec",3]]]],[11,"from_chunked_array","","",106,[[["chunkedarray",3],["polarsdatatype",8]]]],[11,"chunk_lengths","","Get the lengths of the underlying chunks",106,[[],["vec",3]]],[11,"name","","Name of series.",106,[[]]],[11,"rename","","Rename series.",106,[[]]],[11,"field","","Get field (used in schema)",106,[[],["field",3]]],[11,"dtype","","Get datatype of series.",106,[[],["arrowdatatype",4]]],[11,"chunks","","Underlying chunks.",106,[[],["vec",3]]],[11,"n_chunks","","No. of chunks",106,[[]]],[11,"i8","","",106,[[],[["result",6],["int8chunked",6]]]],[11,"i16","","",106,[[],[["int16chunked",6],["result",6]]]],[11,"i32","","Unpack to ChunkedArray",106,[[],[["result",6],["int32chunked",6]]]],[11,"i64","","Unpack to ChunkedArray",106,[[],[["result",6],["int64chunked",6]]]],[11,"f32","","Unpack to ChunkedArray",106,[[],[["float32chunked",6],["result",6]]]],[11,"f64","","Unpack to ChunkedArray",106,[[],[["result",6],["float64chunked",6]]]],[11,"u8","","Unpack to ChunkedArray",106,[[],[["result",6],["uint8chunked",6]]]],[11,"u16","","Unpack to ChunkedArray",106,[[],[["result",6],["uint16chunked",6]]]],[11,"u32","","Unpack to ChunkedArray",106,[[],[["uint32chunked",6],["result",6]]]],[11,"u64","","Unpack to ChunkedArray",106,[[],[["result",6],["uint64chunked",6]]]],[11,"bool","","Unpack to ChunkedArray",106,[[],[["result",6],["booleanchunked",6]]]],[11,"utf8","","Unpack to ChunkedArray",106,[[],[["utf8chunked",6],["result",6]]]],[11,"date32","","Unpack to ChunkedArray",106,[[],[["date32chunked",6],["result",6]]]],[11,"date64","","Unpack to ChunkedArray",106,[[],[["date64chunked",6],["result",6]]]],[11,"time32_millisecond","","Unpack to ChunkedArray",106,[[],[["result",6],["time32millisecondchunked",6]]]],[11,"time32_second","","Unpack to ChunkedArray",106,[[],[["result",6],["time32secondchunked",6]]]],[11,"time64_nanosecond","","Unpack to ChunkedArray",106,[[],[["result",6],["time64nanosecondchunked",6]]]],[11,"time64_microsecond","","Unpack to ChunkedArray",106,[[],[["result",6],["time64microsecondchunked",6]]]],[11,"duration_nanosecond","","Unpack to ChunkedArray",106,[[],[["result",6],["durationnanosecondchunked",6]]]],[11,"duration_microsecond","","Unpack to ChunkedArray",106,[[],[["result",6],["durationmicrosecondchunked",6]]]],[11,"duration_millisecond","","Unpack to ChunkedArray",106,[[],[["durationmillisecondchunked",6],["result",6]]]],[11,"duration_second","","Unpack to ChunkedArray",106,[[],[["durationsecondchunked",6],["result",6]]]],[11,"timestamp_nanosecond","","Unpack to ChunkedArray",106,[[],[["result",6],["timestampnanosecondchunked",6]]]],[11,"timestamp_microsecond","","Unpack to ChunkedArray",106,[[],[["result",6],["timestampmicrosecondchunked",6]]]],[11,"timestamp_millisecond","","Unpack to ChunkedArray",106,[[],[["timestampmillisecondchunked",6],["result",6]]]],[11,"timestamp_second","","Unpack to ChunkedArray",106,[[],[["timestampsecondchunked",6],["result",6]]]],[11,"interval_daytime","","Unpack to ChunkedArray",106,[[],[["intervaldaytimechunked",6],["result",6]]]],[11,"interval_year_month","","Unpack to ChunkedArray",106,[[],[["result",6],["intervalyearmonthchunked",6]]]],[11,"list","","Unpack to ChunkedArray",106,[[],[["listchunked",6],["result",6]]]],[11,"append_array","","",106,[[["arrayref",6]],["result",6]]],[11,"limit","","Take `num_elements` from the top as a zero copy view.",106,[[],["result",6]]],[11,"slice","","Get a zero copy view of the data.",106,[[],["result",6]]],[11,"append","","Append a Series of the same type in place.",106,[[],["result",6]]],[11,"filter","","Filter by boolean mask. This operation clones data.",106,[[["booleanchunked",6],["asref",8]],["result",6]]],[11,"take_iter","","Take by index from an iterator. This operation clones the…",106,[[["option",4]]]],[11,"take_iter_unchecked","","Take by index from an iterator. This operation clones the…",106,[[["option",4]]]],[11,"take_opt_iter_unchecked","","Take by index from an iterator. This operation clones the…",106,[[["option",4]]]],[11,"take_opt_iter","","Take by index from an iterator. This operation clones the…",106,[[["option",4]]]],[11,"take","","Take by index. This operation is clone.",106,[[]]],[11,"len","","Get length of series.",106,[[]]],[11,"is_empty","","Check if Series is empty.",106,[[]]],[11,"rechunk","","Aggregate all chunks to a contiguous array of memory.",106,[[["option",4]],["result",6]]],[11,"head","","Get the head of the Series.",106,[[["option",4]]]],[11,"tail","","Get the tail of the Series.",106,[[["option",4]]]],[11,"drop_nulls","","Drop all null values and return a new Series.",106,[[]]],[11,"expand_at_index","","Create a new Series filled with values at that index.",106,[[]]],[11,"cast","","Cast to some primitive type.",106,[[],["result",6]]],[11,"cast_with_arrow_datatype","","",106,[[["arrowdatatype",4]],["result",6]]],[11,"to_dummies","","Create dummy variables. See DataFrame",106,[[],[["dataframe",3],["result",6]]]],[11,"value_counts","","",106,[[],[["dataframe",3],["result",6]]]],[11,"unpack","","Get the `ChunkedArray` for some `PolarsDataType`",106,[[],[["result",6],["chunkedarray",3]]]],[11,"get","","Get a single value by index. Don\'t use this operation for…",106,[[],["anytype",4]]],[11,"sort_in_place","","Sort in place.",106,[[]]],[11,"sort","","",106,[[]]],[11,"argsort","","Retrieve the indexes needed for a sort.",106,[[],["vec",3]]],[11,"null_count","","Count the null values.",106,[[]]],[11,"unique","","Get unique values in the Series.",106,[[],["result",6]]],[11,"arg_unique","","Get first indexes of unique values.",106,[[],[["result",6],["vec",3]]]],[11,"is_null","","Get a mask of the null values.",106,[[],["booleanchunked",6]]],[11,"is_not_null","","Get a mask of the non-null values.",106,[[],["booleanchunked",6]]],[11,"is_unique","","Get a mask of all the unique values.",106,[[],[["booleanchunked",6],["result",6]]]],[11,"is_duplicated","","Get a mask of all the duplicated values.",106,[[],[["booleanchunked",6],["result",6]]]],[11,"null_bits","","Get the bits that represent the null values of the…",106,[[],["vec",3]]],[11,"reverse","","return a Series in reversed order",106,[[]]],[11,"as_single_ptr","","Rechunk and return a pointer to the start of the Series.…",106,[[]]],[11,"shift","","Shift the values by a given period and fill the parts that…",106,[[],["result",6]]],[11,"fill_none","","Replace None values with one of the following strategies:",106,[[["fillnonestrategy",4]],["result",6]]],[11,"zip_with","","Create a new ChunkedArray with values from self where the…",106,[[["booleanchunked",6],["series",4]],["result",6]]],[11,"sum_as_series","","Get the sum of the Series as a new Series of length 1.",106,[[],["series",4]]],[11,"max_as_series","","Get the max of the Series as a new Series of length 1.",106,[[],["series",4]]],[11,"min_as_series","","Get the min of the Series as a new Series of length 1.",106,[[],["series",4]]],[11,"mean_as_series","","Get the mean of the Series as a new Series of length 1.",106,[[],["series",4]]],[11,"median_as_series","","Get the median of the Series as a new Series of length 1.",106,[[],["series",4]]],[11,"var_as_series","","Get the variance of the Series as a new Series of length 1.",106,[[],["series",4]]],[11,"std_as_series","","Get the standard deviation of the Series as a new Series…",106,[[],["series",4]]],[11,"quantile_as_series","","Get the quantile of the ChunkedArray as a new Series of…",106,[[],[["result",6],["series",4]]]],[11,"rolling_mean","","Apply a rolling mean to a Series. See:…",106,[[["option",4]],["result",6]]],[11,"rolling_sum","","Apply a rolling sum to a Series. See:…",106,[[["option",4]],["result",6]]],[11,"rolling_min","","Apply a rolling min to a Series. See:…",106,[[["option",4]],["result",6]]],[11,"rolling_max","","Apply a rolling max to a Series. See:…",106,[[["option",4]],["result",6]]],[11,"hour","","Extract hour from underlying NaiveDateTime representation.…",106,[[],["result",6]]],[11,"minute","","Extract minute from underlying NaiveDateTime…",106,[[],["result",6]]],[11,"second","","Extract second from underlying NaiveDateTime…",106,[[],["result",6]]],[11,"nanosecond","","Extract second from underlying NaiveDateTime…",106,[[],["result",6]]],[11,"day","","Extract day from underlying NaiveDateTime representation.…",106,[[],["result",6]]],[11,"ordinal_day","","Returns the day of year starting from 1.",106,[[],["result",6]]],[11,"month","","Extract month from underlying NaiveDateTime…",106,[[],["result",6]]],[11,"year","","Extract month from underlying NaiveDateTime…",106,[[],["result",6]]],[0,"testing","polars","Testing utilities.",null,null],[11,"series_equal","polars::series","Check if series are equal. Note that `None == None`…",106,[[["series",4]]]],[11,"series_equal_missing","","Check if all values in series are equal where `None ==…",106,[[["series",4]]]],[11,"frame_equal","polars::frame","Check if `DataFrames` are equal. Note that `None == None`…",69,[[["dataframe",3]]]],[11,"frame_equal_missing","","Check if all values in `DataFrames` are equal where `None…",69,[[["dataframe",3]]]],[14,"match_arrow_data_type_apply_macro","polars","",null,null],[14,"apply_method_all_arrow_series","","",null,null],[14,"apply_method_all_series","","",null,null],[14,"apply_method_numeric_series","","",null,null],[14,"apply_method_numeric_series_and_return","","",null,null],[14,"df","","",null,null],[14,"apply_operand_on_chunkedarray_by_iter","","",null,null],[14,"as_result","","",null,null],[11,"from","polars::chunked_array","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from_cast","","",37,[[]]],[11,"cast","","",37,[[]]],[11,"vzip","","",37,[[]]],[11,"par_iter","","",37,[[]]],[11,"init","","",37,[[]]],[11,"deref","","",37,[[]]],[11,"deref_mut","","",37,[[]]],[11,"drop","","",37,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from_cast","","",0,[[]]],[11,"cast","","",0,[[]]],[11,"vzip","","",0,[[]]],[11,"into_par_iter","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","polars::chunked_array::ops","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from_cast","","",1,[[]]],[11,"cast","","",1,[[]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","polars::prelude","",109,[[]]],[11,"into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from_cast","","",109,[[]]],[11,"cast","","",109,[[]]],[11,"vzip","","",109,[[]]],[11,"init","","",109,[[]]],[11,"deref","","",109,[[]]],[11,"deref_mut","","",109,[[]]],[11,"drop","","",109,[[]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from_cast","","",110,[[]]],[11,"cast","","",110,[[]]],[11,"vzip","","",110,[[]]],[11,"init","","",110,[[]]],[11,"deref","","",110,[[]]],[11,"deref_mut","","",110,[[]]],[11,"drop","","",110,[[]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"from_cast","","",100,[[]]],[11,"cast","","",100,[[]]],[11,"vzip","","",100,[[]]],[11,"init","","",100,[[]]],[11,"deref","","",100,[[]]],[11,"deref_mut","","",100,[[]]],[11,"drop","","",100,[[]]],[11,"from","polars::chunked_array::builder","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from_cast","","",27,[[]]],[11,"cast","","",27,[[]]],[11,"vzip","","",27,[[]]],[11,"init","","",27,[[]]],[11,"deref","","",27,[[]]],[11,"deref_mut","","",27,[[]]],[11,"drop","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from_cast","","",28,[[]]],[11,"cast","","",28,[[]]],[11,"vzip","","",28,[[]]],[11,"init","","",28,[[]]],[11,"deref","","",28,[[]]],[11,"deref_mut","","",28,[[]]],[11,"drop","","",28,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from_cast","","",33,[[]]],[11,"cast","","",33,[[]]],[11,"vzip","","",33,[[]]],[11,"init","","",33,[[]]],[11,"deref","","",33,[[]]],[11,"deref_mut","","",33,[[]]],[11,"drop","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from_cast","","",34,[[]]],[11,"cast","","",34,[[]]],[11,"vzip","","",34,[[]]],[11,"init","","",34,[[]]],[11,"deref","","",34,[[]]],[11,"deref_mut","","",34,[[]]],[11,"drop","","",34,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from_cast","","",29,[[]]],[11,"cast","","",29,[[]]],[11,"vzip","","",29,[[]]],[11,"init","","",29,[[]]],[11,"deref","","",29,[[]]],[11,"deref_mut","","",29,[[]]],[11,"drop","","",29,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from_cast","","",35,[[]]],[11,"cast","","",35,[[]]],[11,"vzip","","",35,[[]]],[11,"init","","",35,[[]]],[11,"deref","","",35,[[]]],[11,"deref_mut","","",35,[[]]],[11,"drop","","",35,[[]]],[11,"from","polars::chunked_array::iterator","",111,[[]]],[11,"into","","",111,[[]]],[11,"into_iter","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"from_cast","","",111,[[]]],[11,"cast","","",111,[[]]],[11,"vzip","","",111,[[]]],[11,"par_bridge","","",111,[[],["iterbridge",3]]],[11,"init","","",111,[[]]],[11,"deref","","",111,[[]]],[11,"deref_mut","","",111,[[]]],[11,"drop","","",111,[[]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"into_iter","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"from_cast","","",112,[[]]],[11,"cast","","",112,[[]]],[11,"vzip","","",112,[[]]],[11,"par_bridge","","",112,[[],["iterbridge",3]]],[11,"init","","",112,[[]]],[11,"deref","","",112,[[]]],[11,"deref_mut","","",112,[[]]],[11,"drop","","",112,[[]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"into_iter","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from_cast","","",113,[[]]],[11,"cast","","",113,[[]]],[11,"vzip","","",113,[[]]],[11,"par_bridge","","",113,[[],["iterbridge",3]]],[11,"init","","",113,[[]]],[11,"deref","","",113,[[]]],[11,"deref_mut","","",113,[[]]],[11,"drop","","",113,[[]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"into_iter","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"from_cast","","",114,[[]]],[11,"cast","","",114,[[]]],[11,"vzip","","",114,[[]]],[11,"par_bridge","","",114,[[],["iterbridge",3]]],[11,"init","","",114,[[]]],[11,"deref","","",114,[[]]],[11,"deref_mut","","",114,[[]]],[11,"drop","","",114,[[]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"into_iter","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from_cast","","",115,[[]]],[11,"cast","","",115,[[]]],[11,"vzip","","",115,[[]]],[11,"par_bridge","","",115,[[],["iterbridge",3]]],[11,"init","","",115,[[]]],[11,"deref","","",115,[[]]],[11,"deref_mut","","",115,[[]]],[11,"drop","","",115,[[]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"into_iter","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from_cast","","",116,[[]]],[11,"cast","","",116,[[]]],[11,"vzip","","",116,[[]]],[11,"par_bridge","","",116,[[],["iterbridge",3]]],[11,"init","","",116,[[]]],[11,"deref","","",116,[[]]],[11,"deref_mut","","",116,[[]]],[11,"drop","","",116,[[]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"into_iter","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"from_cast","","",117,[[]]],[11,"cast","","",117,[[]]],[11,"vzip","","",117,[[]]],[11,"par_bridge","","",117,[[],["iterbridge",3]]],[11,"init","","",117,[[]]],[11,"deref","","",117,[[]]],[11,"deref_mut","","",117,[[]]],[11,"drop","","",117,[[]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"into_iter","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from_cast","","",118,[[]]],[11,"cast","","",118,[[]]],[11,"vzip","","",118,[[]]],[11,"par_bridge","","",118,[[],["iterbridge",3]]],[11,"init","","",118,[[]]],[11,"deref","","",118,[[]]],[11,"deref_mut","","",118,[[]]],[11,"drop","","",118,[[]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"into_iter","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"from_cast","","",119,[[]]],[11,"cast","","",119,[[]]],[11,"vzip","","",119,[[]]],[11,"par_bridge","","",119,[[],["iterbridge",3]]],[11,"init","","",119,[[]]],[11,"deref","","",119,[[]]],[11,"deref_mut","","",119,[[]]],[11,"drop","","",119,[[]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"into_iter","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"from_cast","","",120,[[]]],[11,"cast","","",120,[[]]],[11,"vzip","","",120,[[]]],[11,"par_bridge","","",120,[[],["iterbridge",3]]],[11,"init","","",120,[[]]],[11,"deref","","",120,[[]]],[11,"deref_mut","","",120,[[]]],[11,"drop","","",120,[[]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"into_iter","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"from_cast","","",121,[[]]],[11,"cast","","",121,[[]]],[11,"vzip","","",121,[[]]],[11,"par_bridge","","",121,[[],["iterbridge",3]]],[11,"init","","",121,[[]]],[11,"deref","","",121,[[]]],[11,"deref_mut","","",121,[[]]],[11,"drop","","",121,[[]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"into_iter","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"from_cast","","",122,[[]]],[11,"cast","","",122,[[]]],[11,"vzip","","",122,[[]]],[11,"par_bridge","","",122,[[],["iterbridge",3]]],[11,"init","","",122,[[]]],[11,"deref","","",122,[[]]],[11,"deref_mut","","",122,[[]]],[11,"drop","","",122,[[]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"into_iter","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"from_cast","","",123,[[]]],[11,"cast","","",123,[[]]],[11,"vzip","","",123,[[]]],[11,"par_bridge","","",123,[[],["iterbridge",3]]],[11,"init","","",123,[[]]],[11,"deref","","",123,[[]]],[11,"deref_mut","","",123,[[]]],[11,"drop","","",123,[[]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"into_iter","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"from_cast","","",124,[[]]],[11,"cast","","",124,[[]]],[11,"vzip","","",124,[[]]],[11,"par_bridge","","",124,[[],["iterbridge",3]]],[11,"init","","",124,[[]]],[11,"deref","","",124,[[]]],[11,"deref_mut","","",124,[[]]],[11,"drop","","",124,[[]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"into_iter","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"from_cast","","",125,[[]]],[11,"cast","","",125,[[]]],[11,"vzip","","",125,[[]]],[11,"par_bridge","","",125,[[],["iterbridge",3]]],[11,"init","","",125,[[]]],[11,"deref","","",125,[[]]],[11,"deref_mut","","",125,[[]]],[11,"drop","","",125,[[]]],[11,"from","","",126,[[]]],[11,"into","","",126,[[]]],[11,"into_iter","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"from_cast","","",126,[[]]],[11,"cast","","",126,[[]]],[11,"vzip","","",126,[[]]],[11,"par_bridge","","",126,[[],["iterbridge",3]]],[11,"init","","",126,[[]]],[11,"deref","","",126,[[]]],[11,"deref_mut","","",126,[[]]],[11,"drop","","",126,[[]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"into_iter","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"from_cast","","",127,[[]]],[11,"cast","","",127,[[]]],[11,"vzip","","",127,[[]]],[11,"par_bridge","","",127,[[],["iterbridge",3]]],[11,"init","","",127,[[]]],[11,"deref","","",127,[[]]],[11,"deref_mut","","",127,[[]]],[11,"drop","","",127,[[]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"into_iter","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"from_cast","","",128,[[]]],[11,"cast","","",128,[[]]],[11,"vzip","","",128,[[]]],[11,"par_bridge","","",128,[[],["iterbridge",3]]],[11,"init","","",128,[[]]],[11,"deref","","",128,[[]]],[11,"deref_mut","","",128,[[]]],[11,"drop","","",128,[[]]],[11,"from","","",129,[[]]],[11,"into","","",129,[[]]],[11,"into_iter","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"from_cast","","",129,[[]]],[11,"cast","","",129,[[]]],[11,"vzip","","",129,[[]]],[11,"par_bridge","","",129,[[],["iterbridge",3]]],[11,"init","","",129,[[]]],[11,"deref","","",129,[[]]],[11,"deref_mut","","",129,[[]]],[11,"drop","","",129,[[]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"into_iter","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"from_cast","","",130,[[]]],[11,"cast","","",130,[[]]],[11,"vzip","","",130,[[]]],[11,"par_bridge","","",130,[[],["iterbridge",3]]],[11,"init","","",130,[[]]],[11,"deref","","",130,[[]]],[11,"deref_mut","","",130,[[]]],[11,"drop","","",130,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"into_iter","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from_cast","","",40,[[]]],[11,"cast","","",40,[[]]],[11,"vzip","","",40,[[]]],[11,"par_bridge","","",40,[[],["iterbridge",3]]],[11,"init","","",40,[[]]],[11,"deref","","",40,[[]]],[11,"deref_mut","","",40,[[]]],[11,"drop","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"into_iter","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from_cast","","",41,[[]]],[11,"cast","","",41,[[]]],[11,"vzip","","",41,[[]]],[11,"par_bridge","","",41,[[],["iterbridge",3]]],[11,"init","","",41,[[]]],[11,"deref","","",41,[[]]],[11,"deref_mut","","",41,[[]]],[11,"drop","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"into_iter","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from_cast","","",42,[[]]],[11,"cast","","",42,[[]]],[11,"vzip","","",42,[[]]],[11,"par_bridge","","",42,[[],["iterbridge",3]]],[11,"init","","",42,[[]]],[11,"deref","","",42,[[]]],[11,"deref_mut","","",42,[[]]],[11,"drop","","",42,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"into_iter","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from_cast","","",43,[[]]],[11,"cast","","",43,[[]]],[11,"vzip","","",43,[[]]],[11,"par_bridge","","",43,[[],["iterbridge",3]]],[11,"init","","",43,[[]]],[11,"deref","","",43,[[]]],[11,"deref_mut","","",43,[[]]],[11,"drop","","",43,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"into_iter","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from_cast","","",44,[[]]],[11,"cast","","",44,[[]]],[11,"vzip","","",44,[[]]],[11,"par_bridge","","",44,[[],["iterbridge",3]]],[11,"init","","",44,[[]]],[11,"deref","","",44,[[]]],[11,"deref_mut","","",44,[[]]],[11,"drop","","",44,[[]]],[11,"from","polars::chunked_array::iterator::par::utf8","",131,[[]]],[11,"into","","",131,[[]]],[11,"to_owned","","",131,[[]]],[11,"clone_into","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"from_cast","","",131,[[]]],[11,"cast","","",131,[[]]],[11,"vzip","","",131,[[]]],[11,"into_par_iter","","",131,[[]]],[11,"init","","",131,[[]]],[11,"deref","","",131,[[]]],[11,"deref_mut","","",131,[[]]],[11,"drop","","",131,[[]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"from_cast","","",132,[[]]],[11,"cast","","",132,[[]]],[11,"vzip","","",132,[[]]],[11,"into_par_iter","","",132,[[]]],[11,"init","","",132,[[]]],[11,"deref","","",132,[[]]],[11,"deref_mut","","",132,[[]]],[11,"drop","","",132,[[]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"to_owned","","",133,[[]]],[11,"clone_into","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"from_cast","","",133,[[]]],[11,"cast","","",133,[[]]],[11,"vzip","","",133,[[]]],[11,"into_par_iter","","",133,[[]]],[11,"init","","",133,[[]]],[11,"deref","","",133,[[]]],[11,"deref_mut","","",133,[[]]],[11,"drop","","",133,[[]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"to_owned","","",134,[[]]],[11,"clone_into","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"from_cast","","",134,[[]]],[11,"cast","","",134,[[]]],[11,"vzip","","",134,[[]]],[11,"into_par_iter","","",134,[[]]],[11,"init","","",134,[[]]],[11,"deref","","",134,[[]]],[11,"deref_mut","","",134,[[]]],[11,"drop","","",134,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"to_owned","","",135,[[]]],[11,"clone_into","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"from_cast","","",135,[[]]],[11,"cast","","",135,[[]]],[11,"vzip","","",135,[[]]],[11,"into_par_iter","","",135,[[]]],[11,"init","","",135,[[]]],[11,"deref","","",135,[[]]],[11,"deref_mut","","",135,[[]]],[11,"drop","","",135,[[]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"to_owned","","",136,[[]]],[11,"clone_into","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"from_cast","","",136,[[]]],[11,"cast","","",136,[[]]],[11,"vzip","","",136,[[]]],[11,"into_par_iter","","",136,[[]]],[11,"init","","",136,[[]]],[11,"deref","","",136,[[]]],[11,"deref_mut","","",136,[[]]],[11,"drop","","",136,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from_cast","","",45,[[]]],[11,"cast","","",45,[[]]],[11,"vzip","","",45,[[]]],[11,"into_par_iter","","",45,[[]]],[11,"init","","",45,[[]]],[11,"deref","","",45,[[]]],[11,"deref_mut","","",45,[[]]],[11,"drop","","",45,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from_cast","","",46,[[]]],[11,"cast","","",46,[[]]],[11,"vzip","","",46,[[]]],[11,"into_par_iter","","",46,[[]]],[11,"init","","",46,[[]]],[11,"deref","","",46,[[]]],[11,"deref_mut","","",46,[[]]],[11,"drop","","",46,[[]]],[11,"from","polars::chunked_array::object","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from_cast","","",49,[[]]],[11,"cast","","",49,[[]]],[11,"vzip","","",49,[[]]],[11,"init","","",49,[[]]],[11,"deref","","",49,[[]]],[11,"deref_mut","","",49,[[]]],[11,"drop","","",49,[[]]],[11,"from","polars::chunked_array::object::builder","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from_cast","","",48,[[]]],[11,"cast","","",48,[[]]],[11,"vzip","","",48,[[]]],[11,"init","","",48,[[]]],[11,"deref","","",48,[[]]],[11,"deref_mut","","",48,[[]]],[11,"drop","","",48,[[]]],[11,"from","polars::datatypes","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from_cast","","",58,[[]]],[11,"cast","","",58,[[]]],[11,"equivalent","","",58,[[]]],[11,"vzip","","",58,[[]]],[11,"get_hash","","",58,[[]]],[11,"init","","",58,[[]]],[11,"deref","","",58,[[]]],[11,"deref_mut","","",58,[[]]],[11,"drop","","",58,[[]]],[11,"get_data_type","","",137,[[],["datatype",4]]],[11,"from","","",137,[[]]],[11,"into","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"from_cast","","",137,[[]]],[11,"cast","","",137,[[]]],[11,"vzip","","",137,[[]]],[11,"init","","",137,[[]]],[11,"deref","","",137,[[]]],[11,"deref_mut","","",137,[[]]],[11,"drop","","",137,[[]]],[11,"get_data_type","","",138,[[],["datatype",4]]],[11,"from","","",138,[[]]],[11,"into","","",138,[[]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"from_cast","","",138,[[]]],[11,"cast","","",138,[[]]],[11,"vzip","","",138,[[]]],[11,"init","","",138,[[]]],[11,"deref","","",138,[[]]],[11,"deref_mut","","",138,[[]]],[11,"drop","","",138,[[]]],[11,"get_data_type","","",139,[[],["datatype",4]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"from_cast","","",139,[[]]],[11,"cast","","",139,[[]]],[11,"vzip","","",139,[[]]],[11,"init","","",139,[[]]],[11,"deref","","",139,[[]]],[11,"deref_mut","","",139,[[]]],[11,"drop","","",139,[[]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from_cast","","",61,[[]]],[11,"cast","","",61,[[]]],[11,"equivalent","","",61,[[]]],[11,"vzip","","",61,[[]]],[11,"get_hash","","",61,[[]]],[11,"init","","",61,[[]]],[11,"deref","","",61,[[]]],[11,"deref_mut","","",61,[[]]],[11,"drop","","",61,[[]]],[11,"get_data_type","","",140,[[],["datatype",4]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"from_cast","","",140,[[]]],[11,"cast","","",140,[[]]],[11,"vzip","","",140,[[]]],[11,"init","","",140,[[]]],[11,"deref","","",140,[[]]],[11,"deref_mut","","",140,[[]]],[11,"drop","","",140,[[]]],[11,"get_data_type","","",141,[[],["datatype",4]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"from_cast","","",141,[[]]],[11,"cast","","",141,[[]]],[11,"vzip","","",141,[[]]],[11,"init","","",141,[[]]],[11,"deref","","",141,[[]]],[11,"deref_mut","","",141,[[]]],[11,"drop","","",141,[[]]],[11,"get_data_type","","",142,[[],["datatype",4]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"from_cast","","",142,[[]]],[11,"cast","","",142,[[]]],[11,"vzip","","",142,[[]]],[11,"init","","",142,[[]]],[11,"deref","","",142,[[]]],[11,"deref_mut","","",142,[[]]],[11,"drop","","",142,[[]]],[11,"get_data_type","","",143,[[],["datatype",4]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"from_cast","","",143,[[]]],[11,"cast","","",143,[[]]],[11,"vzip","","",143,[[]]],[11,"init","","",143,[[]]],[11,"deref","","",143,[[]]],[11,"deref_mut","","",143,[[]]],[11,"drop","","",143,[[]]],[11,"get_data_type","","",144,[[],["datatype",4]]],[11,"from","","",144,[[]]],[11,"into","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"from_cast","","",144,[[]]],[11,"cast","","",144,[[]]],[11,"vzip","","",144,[[]]],[11,"init","","",144,[[]]],[11,"deref","","",144,[[]]],[11,"deref_mut","","",144,[[]]],[11,"drop","","",144,[[]]],[11,"get_data_type","","",145,[[],["datatype",4]]],[11,"from","","",145,[[]]],[11,"into","","",145,[[]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"try_into","","",145,[[],["result",4]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"from_cast","","",145,[[]]],[11,"cast","","",145,[[]]],[11,"vzip","","",145,[[]]],[11,"init","","",145,[[]]],[11,"deref","","",145,[[]]],[11,"deref_mut","","",145,[[]]],[11,"drop","","",145,[[]]],[11,"get_data_type","","",146,[[],["datatype",4]]],[11,"from","","",146,[[]]],[11,"into","","",146,[[]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"try_into","","",146,[[],["result",4]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"from_cast","","",146,[[]]],[11,"cast","","",146,[[]]],[11,"vzip","","",146,[[]]],[11,"init","","",146,[[]]],[11,"deref","","",146,[[]]],[11,"deref_mut","","",146,[[]]],[11,"drop","","",146,[[]]],[11,"get_data_type","","",147,[[],["datatype",4]]],[11,"from","","",147,[[]]],[11,"into","","",147,[[]]],[11,"borrow","","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"try_into","","",147,[[],["result",4]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"from_cast","","",147,[[]]],[11,"cast","","",147,[[]]],[11,"vzip","","",147,[[]]],[11,"init","","",147,[[]]],[11,"deref","","",147,[[]]],[11,"deref_mut","","",147,[[]]],[11,"drop","","",147,[[]]],[11,"get_data_type","","",148,[[],["datatype",4]]],[11,"from","","",148,[[]]],[11,"into","","",148,[[]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"try_into","","",148,[[],["result",4]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"from_cast","","",148,[[]]],[11,"cast","","",148,[[]]],[11,"vzip","","",148,[[]]],[11,"init","","",148,[[]]],[11,"deref","","",148,[[]]],[11,"deref_mut","","",148,[[]]],[11,"drop","","",148,[[]]],[11,"get_data_type","","",149,[[],["datatype",4]]],[11,"from","","",149,[[]]],[11,"into","","",149,[[]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"try_from","","",149,[[],["result",4]]],[11,"try_into","","",149,[[],["result",4]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"from_cast","","",149,[[]]],[11,"cast","","",149,[[]]],[11,"vzip","","",149,[[]]],[11,"init","","",149,[[]]],[11,"deref","","",149,[[]]],[11,"deref_mut","","",149,[[]]],[11,"drop","","",149,[[]]],[11,"get_data_type","","",150,[[],["datatype",4]]],[11,"from","","",150,[[]]],[11,"into","","",150,[[]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"try_from","","",150,[[],["result",4]]],[11,"try_into","","",150,[[],["result",4]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"from_cast","","",150,[[]]],[11,"cast","","",150,[[]]],[11,"vzip","","",150,[[]]],[11,"init","","",150,[[]]],[11,"deref","","",150,[[]]],[11,"deref_mut","","",150,[[]]],[11,"drop","","",150,[[]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from_cast","","",62,[[]]],[11,"cast","","",62,[[]]],[11,"equivalent","","",62,[[]]],[11,"vzip","","",62,[[]]],[11,"get_hash","","",62,[[]]],[11,"init","","",62,[[]]],[11,"deref","","",62,[[]]],[11,"deref_mut","","",62,[[]]],[11,"drop","","",62,[[]]],[11,"get_data_type","","",151,[[],["datatype",4]]],[11,"from","","",151,[[]]],[11,"into","","",151,[[]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"try_into","","",151,[[],["result",4]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"from_cast","","",151,[[]]],[11,"cast","","",151,[[]]],[11,"vzip","","",151,[[]]],[11,"init","","",151,[[]]],[11,"deref","","",151,[[]]],[11,"deref_mut","","",151,[[]]],[11,"drop","","",151,[[]]],[11,"get_data_type","","",152,[[],["datatype",4]]],[11,"from","","",152,[[]]],[11,"into","","",152,[[]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"try_from","","",152,[[],["result",4]]],[11,"try_into","","",152,[[],["result",4]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"from_cast","","",152,[[]]],[11,"cast","","",152,[[]]],[11,"vzip","","",152,[[]]],[11,"init","","",152,[[]]],[11,"deref","","",152,[[]]],[11,"deref_mut","","",152,[[]]],[11,"drop","","",152,[[]]],[11,"get_data_type","","",153,[[],["datatype",4]]],[11,"from","","",153,[[]]],[11,"into","","",153,[[]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"try_into","","",153,[[],["result",4]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"from_cast","","",153,[[]]],[11,"cast","","",153,[[]]],[11,"vzip","","",153,[[]]],[11,"init","","",153,[[]]],[11,"deref","","",153,[[]]],[11,"deref_mut","","",153,[[]]],[11,"drop","","",153,[[]]],[11,"get_data_type","","",154,[[],["datatype",4]]],[11,"from","","",154,[[]]],[11,"into","","",154,[[]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"try_from","","",154,[[],["result",4]]],[11,"try_into","","",154,[[],["result",4]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"from_cast","","",154,[[]]],[11,"cast","","",154,[[]]],[11,"vzip","","",154,[[]]],[11,"init","","",154,[[]]],[11,"deref","","",154,[[]]],[11,"deref_mut","","",154,[[]]],[11,"drop","","",154,[[]]],[11,"get_data_type","","",155,[[],["datatype",4]]],[11,"from","","",155,[[]]],[11,"into","","",155,[[]]],[11,"borrow","","",155,[[]]],[11,"borrow_mut","","",155,[[]]],[11,"try_from","","",155,[[],["result",4]]],[11,"try_into","","",155,[[],["result",4]]],[11,"type_id","","",155,[[],["typeid",3]]],[11,"from_cast","","",155,[[]]],[11,"cast","","",155,[[]]],[11,"vzip","","",155,[[]]],[11,"init","","",155,[[]]],[11,"deref","","",155,[[]]],[11,"deref_mut","","",155,[[]]],[11,"drop","","",155,[[]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from_cast","","",63,[[]]],[11,"cast","","",63,[[]]],[11,"equivalent","","",63,[[]]],[11,"vzip","","",63,[[]]],[11,"get_hash","","",63,[[]]],[11,"init","","",63,[[]]],[11,"deref","","",63,[[]]],[11,"deref_mut","","",63,[[]]],[11,"drop","","",63,[[]]],[11,"get_data_type","","",156,[[],["datatype",4]]],[11,"from","","",156,[[]]],[11,"into","","",156,[[]]],[11,"borrow","","",156,[[]]],[11,"borrow_mut","","",156,[[]]],[11,"try_from","","",156,[[],["result",4]]],[11,"try_into","","",156,[[],["result",4]]],[11,"type_id","","",156,[[],["typeid",3]]],[11,"from_cast","","",156,[[]]],[11,"cast","","",156,[[]]],[11,"vzip","","",156,[[]]],[11,"init","","",156,[[]]],[11,"deref","","",156,[[]]],[11,"deref_mut","","",156,[[]]],[11,"drop","","",156,[[]]],[11,"get_data_type","","",157,[[],["datatype",4]]],[11,"from","","",157,[[]]],[11,"into","","",157,[[]]],[11,"borrow","","",157,[[]]],[11,"borrow_mut","","",157,[[]]],[11,"try_from","","",157,[[],["result",4]]],[11,"try_into","","",157,[[],["result",4]]],[11,"type_id","","",157,[[],["typeid",3]]],[11,"from_cast","","",157,[[]]],[11,"cast","","",157,[[]]],[11,"vzip","","",157,[[]]],[11,"init","","",157,[[]]],[11,"deref","","",157,[[]]],[11,"deref_mut","","",157,[[]]],[11,"drop","","",157,[[]]],[11,"get_data_type","","",158,[[],["datatype",4]]],[11,"from","","",158,[[]]],[11,"into","","",158,[[]]],[11,"borrow","","",158,[[]]],[11,"borrow_mut","","",158,[[]]],[11,"try_from","","",158,[[],["result",4]]],[11,"try_into","","",158,[[],["result",4]]],[11,"type_id","","",158,[[],["typeid",3]]],[11,"from_cast","","",158,[[]]],[11,"cast","","",158,[[]]],[11,"vzip","","",158,[[]]],[11,"init","","",158,[[]]],[11,"deref","","",158,[[]]],[11,"deref_mut","","",158,[[]]],[11,"drop","","",158,[[]]],[11,"get_data_type","","",159,[[],["datatype",4]]],[11,"from","","",159,[[]]],[11,"into","","",159,[[]]],[11,"borrow","","",159,[[]]],[11,"borrow_mut","","",159,[[]]],[11,"try_from","","",159,[[],["result",4]]],[11,"try_into","","",159,[[],["result",4]]],[11,"type_id","","",159,[[],["typeid",3]]],[11,"from_cast","","",159,[[]]],[11,"cast","","",159,[[]]],[11,"vzip","","",159,[[]]],[11,"init","","",159,[[]]],[11,"deref","","",159,[[]]],[11,"deref_mut","","",159,[[]]],[11,"drop","","",159,[[]]],[11,"get_data_type","","",160,[[],["datatype",4]]],[11,"from","","",160,[[]]],[11,"into","","",160,[[]]],[11,"borrow","","",160,[[]]],[11,"borrow_mut","","",160,[[]]],[11,"try_from","","",160,[[],["result",4]]],[11,"try_into","","",160,[[],["result",4]]],[11,"type_id","","",160,[[],["typeid",3]]],[11,"from_cast","","",160,[[]]],[11,"cast","","",160,[[]]],[11,"vzip","","",160,[[]]],[11,"init","","",160,[[]]],[11,"deref","","",160,[[]]],[11,"deref_mut","","",160,[[]]],[11,"drop","","",160,[[]]],[11,"get_data_type","","",161,[[],["datatype",4]]],[11,"from","","",161,[[]]],[11,"into","","",161,[[]]],[11,"borrow","","",161,[[]]],[11,"borrow_mut","","",161,[[]]],[11,"try_from","","",161,[[],["result",4]]],[11,"try_into","","",161,[[],["result",4]]],[11,"type_id","","",161,[[],["typeid",3]]],[11,"from_cast","","",161,[[]]],[11,"cast","","",161,[[]]],[11,"vzip","","",161,[[]]],[11,"init","","",161,[[]]],[11,"deref","","",161,[[]]],[11,"deref_mut","","",161,[[]]],[11,"drop","","",161,[[]]],[11,"get_data_type","","",162,[[],["datatype",4]]],[11,"from","","",162,[[]]],[11,"into","","",162,[[]]],[11,"borrow","","",162,[[]]],[11,"borrow_mut","","",162,[[]]],[11,"try_from","","",162,[[],["result",4]]],[11,"try_into","","",162,[[],["result",4]]],[11,"type_id","","",162,[[],["typeid",3]]],[11,"from_cast","","",162,[[]]],[11,"cast","","",162,[[]]],[11,"vzip","","",162,[[]]],[11,"init","","",162,[[]]],[11,"deref","","",162,[[]]],[11,"deref_mut","","",162,[[]]],[11,"drop","","",162,[[]]],[11,"get_data_type","","",163,[[],["datatype",4]]],[11,"from","","",163,[[]]],[11,"into","","",163,[[]]],[11,"borrow","","",163,[[]]],[11,"borrow_mut","","",163,[[]]],[11,"try_from","","",163,[[],["result",4]]],[11,"try_into","","",163,[[],["result",4]]],[11,"type_id","","",163,[[],["typeid",3]]],[11,"from_cast","","",163,[[]]],[11,"cast","","",163,[[]]],[11,"vzip","","",163,[[]]],[11,"init","","",163,[[]]],[11,"deref","","",163,[[]]],[11,"deref_mut","","",163,[[]]],[11,"drop","","",163,[[]]],[11,"get_data_type","","",164,[[],["datatype",4]]],[11,"from","","",164,[[]]],[11,"into","","",164,[[]]],[11,"borrow","","",164,[[]]],[11,"borrow_mut","","",164,[[]]],[11,"try_from","","",164,[[],["result",4]]],[11,"try_into","","",164,[[],["result",4]]],[11,"type_id","","",164,[[],["typeid",3]]],[11,"from_cast","","",164,[[]]],[11,"cast","","",164,[[]]],[11,"vzip","","",164,[[]]],[11,"init","","",164,[[]]],[11,"deref","","",164,[[]]],[11,"deref_mut","","",164,[[]]],[11,"drop","","",164,[[]]],[11,"get_data_type","","",165,[[],["datatype",4]]],[11,"from","","",165,[[]]],[11,"into","","",165,[[]]],[11,"borrow","","",165,[[]]],[11,"borrow_mut","","",165,[[]]],[11,"try_from","","",165,[[],["result",4]]],[11,"try_into","","",165,[[],["result",4]]],[11,"type_id","","",165,[[],["typeid",3]]],[11,"from_cast","","",165,[[]]],[11,"cast","","",165,[[]]],[11,"vzip","","",165,[[]]],[11,"init","","",165,[[]]],[11,"deref","","",165,[[]]],[11,"deref_mut","","",165,[[]]],[11,"drop","","",165,[[]]],[11,"get_data_type","","",166,[[],["datatype",4]]],[11,"from","","",166,[[]]],[11,"into","","",166,[[]]],[11,"borrow","","",166,[[]]],[11,"borrow_mut","","",166,[[]]],[11,"try_from","","",166,[[],["result",4]]],[11,"try_into","","",166,[[],["result",4]]],[11,"type_id","","",166,[[],["typeid",3]]],[11,"from_cast","","",166,[[]]],[11,"cast","","",166,[[]]],[11,"vzip","","",166,[[]]],[11,"init","","",166,[[]]],[11,"deref","","",166,[[]]],[11,"deref_mut","","",166,[[]]],[11,"drop","","",166,[[]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_string","","",64,[[],["string",3]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from_cast","","",64,[[]]],[11,"cast","","",64,[[]]],[11,"vzip","","",64,[[]]],[11,"init","","",64,[[]]],[11,"deref","","",64,[[]]],[11,"deref_mut","","",64,[[]]],[11,"drop","","",64,[[]]],[11,"from","polars::error","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_string","","",67,[[],["string",3]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from_cast","","",67,[[]]],[11,"cast","","",67,[[]]],[11,"vzip","","",67,[[]]],[11,"init","","",67,[[]]],[11,"deref","","",67,[[]]],[11,"deref_mut","","",67,[[]]],[11,"drop","","",67,[[]]],[11,"from","polars::frame","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"to_string","","",69,[[],["string",3]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from_cast","","",69,[[]]],[11,"cast","","",69,[[]]],[11,"vzip","","",69,[[]]],[11,"init","","",69,[[]]],[11,"deref","","",69,[[]]],[11,"deref_mut","","",69,[[]]],[11,"drop","","",69,[[]]],[11,"from","","",167,[[]]],[11,"into","","",167,[[]]],[11,"into_iter","","",167,[[]]],[11,"borrow","","",167,[[]]],[11,"borrow_mut","","",167,[[]]],[11,"try_from","","",167,[[],["result",4]]],[11,"try_into","","",167,[[],["result",4]]],[11,"type_id","","",167,[[],["typeid",3]]],[11,"from_cast","","",167,[[]]],[11,"cast","","",167,[[]]],[11,"vzip","","",167,[[]]],[11,"par_bridge","","",167,[[],["iterbridge",3]]],[11,"init","","",167,[[]]],[11,"deref","","",167,[[]]],[11,"deref_mut","","",167,[[]]],[11,"drop","","",167,[[]]],[11,"from","polars::frame::group_by","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from_cast","","",71,[[]]],[11,"cast","","",71,[[]]],[11,"vzip","","",71,[[]]],[11,"init","","",71,[[]]],[11,"deref","","",71,[[]]],[11,"deref_mut","","",71,[[]]],[11,"drop","","",71,[[]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from_cast","","",72,[[]]],[11,"cast","","",72,[[]]],[11,"vzip","","",72,[[]]],[11,"init","","",72,[[]]],[11,"deref","","",72,[[]]],[11,"deref_mut","","",72,[[]]],[11,"drop","","",72,[[]]],[11,"from","polars::frame::ser::csv","",168,[[]]],[11,"into","","",168,[[]]],[11,"borrow","","",168,[[]]],[11,"borrow_mut","","",168,[[]]],[11,"try_from","","",168,[[],["result",4]]],[11,"try_into","","",168,[[],["result",4]]],[11,"type_id","","",168,[[],["typeid",3]]],[11,"from_cast","","",168,[[]]],[11,"cast","","",168,[[]]],[11,"vzip","","",168,[[]]],[11,"init","","",168,[[]]],[11,"deref","","",168,[[]]],[11,"deref_mut","","",168,[[]]],[11,"drop","","",168,[[]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from_cast","","",77,[[]]],[11,"cast","","",77,[[]]],[11,"vzip","","",77,[[]]],[11,"init","","",77,[[]]],[11,"deref","","",77,[[]]],[11,"deref_mut","","",77,[[]]],[11,"drop","","",77,[[]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from_cast","","",78,[[]]],[11,"cast","","",78,[[]]],[11,"vzip","","",78,[[]]],[11,"init","","",78,[[]]],[11,"deref","","",78,[[]]],[11,"deref_mut","","",78,[[]]],[11,"drop","","",78,[[]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from_cast","","",76,[[]]],[11,"cast","","",76,[[]]],[11,"vzip","","",76,[[]]],[11,"init","","",76,[[]]],[11,"deref","","",76,[[]]],[11,"deref_mut","","",76,[[]]],[11,"drop","","",76,[[]]],[11,"from","polars::frame::ser::ipc","",169,[[]]],[11,"into","","",169,[[]]],[11,"borrow","","",169,[[]]],[11,"borrow_mut","","",169,[[]]],[11,"try_from","","",169,[[],["result",4]]],[11,"try_into","","",169,[[],["result",4]]],[11,"type_id","","",169,[[],["typeid",3]]],[11,"from_cast","","",169,[[]]],[11,"cast","","",169,[[]]],[11,"vzip","","",169,[[]]],[11,"init","","",169,[[]]],[11,"deref","","",169,[[]]],[11,"deref_mut","","",169,[[]]],[11,"drop","","",169,[[]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from_cast","","",79,[[]]],[11,"cast","","",79,[[]]],[11,"vzip","","",79,[[]]],[11,"init","","",79,[[]]],[11,"deref","","",79,[[]]],[11,"deref_mut","","",79,[[]]],[11,"drop","","",79,[[]]],[11,"from","polars::frame::ser::json","",170,[[]]],[11,"into","","",170,[[]]],[11,"borrow","","",170,[[]]],[11,"borrow_mut","","",170,[[]]],[11,"try_from","","",170,[[],["result",4]]],[11,"try_into","","",170,[[],["result",4]]],[11,"type_id","","",170,[[],["typeid",3]]],[11,"from_cast","","",170,[[]]],[11,"cast","","",170,[[]]],[11,"vzip","","",170,[[]]],[11,"init","","",170,[[]]],[11,"deref","","",170,[[]]],[11,"deref_mut","","",170,[[]]],[11,"drop","","",170,[[]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from_cast","","",80,[[]]],[11,"cast","","",80,[[]]],[11,"vzip","","",80,[[]]],[11,"init","","",80,[[]]],[11,"deref","","",80,[[]]],[11,"deref_mut","","",80,[[]]],[11,"drop","","",80,[[]]],[11,"from","polars::frame::ser::parquet","",171,[[]]],[11,"into","","",171,[[]]],[11,"borrow","","",171,[[]]],[11,"borrow_mut","","",171,[[]]],[11,"try_from","","",171,[[],["result",4]]],[11,"try_into","","",171,[[],["result",4]]],[11,"type_id","","",171,[[],["typeid",3]]],[11,"from_cast","","",171,[[]]],[11,"cast","","",171,[[]]],[11,"vzip","","",171,[[]]],[11,"init","","",171,[[]]],[11,"deref","","",171,[[]]],[11,"deref_mut","","",171,[[]]],[11,"drop","","",171,[[]]],[11,"from","polars::lazy::dsl","",96,[[]]],[11,"into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from_cast","","",96,[[]]],[11,"cast","","",96,[[]]],[11,"vzip","","",96,[[]]],[11,"init","","",96,[[]]],[11,"deref","","",96,[[]]],[11,"deref_mut","","",96,[[]]],[11,"drop","","",96,[[]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from_cast","","",97,[[]]],[11,"cast","","",97,[[]]],[11,"vzip","","",97,[[]]],[11,"init","","",97,[[]]],[11,"deref","","",97,[[]]],[11,"deref_mut","","",97,[[]]],[11,"drop","","",97,[[]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from_cast","","",85,[[]]],[11,"cast","","",85,[[]]],[11,"vzip","","",85,[[]]],[11,"init","","",85,[[]]],[11,"deref","","",85,[[]]],[11,"deref_mut","","",85,[[]]],[11,"drop","","",85,[[]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from_cast","","",93,[[]]],[11,"cast","","",93,[[]]],[11,"equivalent","","",93,[[]]],[11,"vzip","","",93,[[]]],[11,"get_hash","","",93,[[]]],[11,"init","","",93,[[]]],[11,"deref","","",93,[[]]],[11,"deref_mut","","",93,[[]]],[11,"drop","","",93,[[]]],[11,"from","polars::lazy::frame","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"from_cast","","",98,[[]]],[11,"cast","","",98,[[]]],[11,"vzip","","",98,[[]]],[11,"init","","",98,[[]]],[11,"deref","","",98,[[]]],[11,"deref_mut","","",98,[[]]],[11,"drop","","",98,[[]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"from_cast","","",99,[[]]],[11,"cast","","",99,[[]]],[11,"vzip","","",99,[[]]],[11,"init","","",99,[[]]],[11,"deref","","",99,[[]]],[11,"deref_mut","","",99,[[]]],[11,"drop","","",99,[[]]],[11,"from","polars::prelude","",172,[[]]],[11,"into","","",172,[[]]],[11,"to_owned","","",172,[[]]],[11,"clone_into","","",172,[[]]],[11,"to_string","","",172,[[],["string",3]]],[11,"borrow","","",172,[[]]],[11,"borrow_mut","","",172,[[]]],[11,"try_from","","",172,[[],["result",4]]],[11,"try_into","","",172,[[],["result",4]]],[11,"type_id","","",172,[[],["typeid",3]]],[11,"from_cast","","",172,[[]]],[11,"cast","","",172,[[]]],[11,"equivalent","","",172,[[]]],[11,"vzip","","",172,[[]]],[11,"get_hash","","",172,[[]]],[11,"init","","",172,[[]]],[11,"deref","","",172,[[]]],[11,"deref_mut","","",172,[[]]],[11,"drop","","",172,[[]]],[11,"from","","",173,[[]]],[11,"into","","",173,[[]]],[11,"to_owned","","",173,[[]]],[11,"clone_into","","",173,[[]]],[11,"to_string","","",173,[[],["string",3]]],[11,"borrow","","",173,[[]]],[11,"borrow_mut","","",173,[[]]],[11,"try_from","","",173,[[],["result",4]]],[11,"try_into","","",173,[[],["result",4]]],[11,"type_id","","",173,[[],["typeid",3]]],[11,"from_cast","","",173,[[]]],[11,"cast","","",173,[[]]],[11,"equivalent","","",173,[[]]],[11,"vzip","","",173,[[]]],[11,"init","","",173,[[]]],[11,"deref","","",173,[[]]],[11,"deref_mut","","",173,[[]]],[11,"drop","","",173,[[]]],[11,"from","polars::series","",106,[[]]],[11,"into","","",106,[[]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"to_string","","",106,[[],["string",3]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from_cast","","",106,[[]]],[11,"cast","","",106,[[]]],[11,"vzip","","",106,[[]]],[11,"init","","",106,[[]]],[11,"deref","","",106,[[]]],[11,"deref_mut","","",106,[[]]],[11,"drop","","",106,[[]]],[11,"default","polars::frame::ser::json","",170,[[],["readerbuilder",3]]],[11,"default","polars::frame::ser::csv","",168,[[],["writerbuilder",3]]],[11,"cmp","polars::datatypes","",61,[[["dateunit",4]],["ordering",4]]],[11,"cmp","","",58,[[["datatype",4]],["ordering",4]]],[11,"cmp","","",63,[[["timeunit",4]],["ordering",4]]],[11,"cmp","","",62,[[["intervalunit",4]],["ordering",4]]],[11,"cmp","polars::prelude","",172,[[["field",3]],["ordering",4]]],[11,"fmt","polars::datatypes","",146,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",58,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",140,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",162,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","polars::frame::ser::csv","",168,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","polars::prelude","",172,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","polars::datatypes","",137,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",139,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",150,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",153,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",143,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",152,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",138,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",161,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",142,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",158,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",160,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",163,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",145,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",148,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",141,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",144,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",151,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",157,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",154,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",63,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",149,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",62,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","polars::prelude","",173,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","polars::datatypes","",156,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",159,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",61,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","polars::frame::ser::json","",170,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","polars::datatypes","",147,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",155,[[["formatter",3]],[["result",4],["error",3]]]],[11,"eq","","",61,[[["dateunit",4]]]],[11,"eq","polars::prelude","",172,[[["field",3]]]],[11,"ne","","",172,[[["field",3]]]],[11,"eq","polars::datatypes","",62,[[["intervalunit",4]]]],[11,"eq","","",63,[[["timeunit",4]]]],[11,"eq","","",58,[[["datatype",4]]]],[11,"ne","","",58,[[["datatype",4]]]],[11,"eq","polars::prelude","",173,[[["schema",3]]]],[11,"ne","","",173,[[["schema",3]]]],[11,"lanes","polars::datatypes","",140,[[]]],[11,"init","","",140,[[]]],[11,"load","","",140,[[]]],[11,"mask_init","","",140,[[]]],[11,"mask_from_u64","","",140,[[]]],[11,"mask_get","","",140,[[]]],[11,"bitmask","","",140,[[]]],[11,"mask_set","","",140,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",140,[[]]],[11,"mask_any","","",140,[[]]],[11,"bin_op","","",140,[[]]],[11,"eq","","",140,[[]]],[11,"ne","","",140,[[]]],[11,"lt","","",140,[[]]],[11,"le","","",140,[[]]],[11,"gt","","",140,[[]]],[11,"ge","","",140,[[]]],[11,"write","","",140,[[]]],[11,"lanes","","",160,[[]]],[11,"init","","",160,[[]]],[11,"load","","",160,[[]]],[11,"mask_init","","",160,[[]]],[11,"mask_from_u64","","",160,[[]]],[11,"mask_get","","",160,[[]]],[11,"bitmask","","",160,[[]]],[11,"mask_set","","",160,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",160,[[]]],[11,"mask_any","","",160,[[]]],[11,"bin_op","","",160,[[]]],[11,"eq","","",160,[[]]],[11,"ne","","",160,[[]]],[11,"lt","","",160,[[]]],[11,"le","","",160,[[]]],[11,"gt","","",160,[[]]],[11,"ge","","",160,[[]]],[11,"write","","",160,[[]]],[11,"lanes","","",149,[[]]],[11,"init","","",149,[[]]],[11,"load","","",149,[[]]],[11,"mask_init","","",149,[[]]],[11,"mask_from_u64","","",149,[[]]],[11,"mask_get","","",149,[[]]],[11,"bitmask","","",149,[[]]],[11,"mask_set","","",149,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",149,[[]]],[11,"mask_any","","",149,[[]]],[11,"bin_op","","",149,[[]]],[11,"eq","","",149,[[]]],[11,"ne","","",149,[[]]],[11,"lt","","",149,[[]]],[11,"le","","",149,[[]]],[11,"gt","","",149,[[]]],[11,"ge","","",149,[[]]],[11,"write","","",149,[[]]],[11,"lanes","","",144,[[]]],[11,"init","","",144,[[]]],[11,"load","","",144,[[]]],[11,"mask_init","","",144,[[]]],[11,"mask_from_u64","","",144,[[]]],[11,"mask_get","","",144,[[]]],[11,"bitmask","","",144,[[]]],[11,"mask_set","","",144,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",144,[[]]],[11,"mask_any","","",144,[[]]],[11,"bin_op","","",144,[[]]],[11,"eq","","",144,[[]]],[11,"ne","","",144,[[]]],[11,"lt","","",144,[[]]],[11,"le","","",144,[[]]],[11,"gt","","",144,[[]]],[11,"ge","","",144,[[]]],[11,"write","","",144,[[]]],[11,"lanes","","",154,[[]]],[11,"init","","",154,[[]]],[11,"load","","",154,[[]]],[11,"mask_init","","",154,[[]]],[11,"mask_from_u64","","",154,[[]]],[11,"mask_get","","",154,[[]]],[11,"bitmask","","",154,[[]]],[11,"mask_set","","",154,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",154,[[]]],[11,"mask_any","","",154,[[]]],[11,"bin_op","","",154,[[]]],[11,"eq","","",154,[[]]],[11,"ne","","",154,[[]]],[11,"lt","","",154,[[]]],[11,"le","","",154,[[]]],[11,"gt","","",154,[[]]],[11,"ge","","",154,[[]]],[11,"write","","",154,[[]]],[11,"lanes","","",155,[[]]],[11,"init","","",155,[[]]],[11,"load","","",155,[[]]],[11,"mask_init","","",155,[[]]],[11,"mask_from_u64","","",155,[[]]],[11,"mask_get","","",155,[[]]],[11,"bitmask","","",155,[[]]],[11,"mask_set","","",155,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",155,[[]]],[11,"mask_any","","",155,[[]]],[11,"bin_op","","",155,[[]]],[11,"eq","","",155,[[]]],[11,"ne","","",155,[[]]],[11,"lt","","",155,[[]]],[11,"le","","",155,[[]]],[11,"gt","","",155,[[]]],[11,"ge","","",155,[[]]],[11,"write","","",155,[[]]],[11,"lanes","","",147,[[]]],[11,"init","","",147,[[]]],[11,"load","","",147,[[]]],[11,"mask_init","","",147,[[]]],[11,"mask_from_u64","","",147,[[]]],[11,"mask_get","","",147,[[]]],[11,"bitmask","","",147,[[]]],[11,"mask_set","","",147,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",147,[[]]],[11,"mask_any","","",147,[[]]],[11,"bin_op","","",147,[[]]],[11,"eq","","",147,[[]]],[11,"ne","","",147,[[]]],[11,"lt","","",147,[[]]],[11,"le","","",147,[[]]],[11,"gt","","",147,[[]]],[11,"ge","","",147,[[]]],[11,"write","","",147,[[]]],[11,"lanes","","",150,[[]]],[11,"init","","",150,[[]]],[11,"load","","",150,[[]]],[11,"mask_init","","",150,[[]]],[11,"mask_from_u64","","",150,[[]]],[11,"mask_get","","",150,[[]]],[11,"bitmask","","",150,[[]]],[11,"mask_set","","",150,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",150,[[]]],[11,"mask_any","","",150,[[]]],[11,"bin_op","","",150,[[]]],[11,"eq","","",150,[[]]],[11,"ne","","",150,[[]]],[11,"lt","","",150,[[]]],[11,"le","","",150,[[]]],[11,"gt","","",150,[[]]],[11,"ge","","",150,[[]]],[11,"write","","",150,[[]]],[11,"lanes","","",151,[[]]],[11,"init","","",151,[[]]],[11,"load","","",151,[[]]],[11,"mask_init","","",151,[[]]],[11,"mask_from_u64","","",151,[[]]],[11,"mask_get","","",151,[[]]],[11,"bitmask","","",151,[[]]],[11,"mask_set","","",151,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",151,[[]]],[11,"mask_any","","",151,[[]]],[11,"bin_op","","",151,[[]]],[11,"eq","","",151,[[]]],[11,"ne","","",151,[[]]],[11,"lt","","",151,[[]]],[11,"le","","",151,[[]]],[11,"gt","","",151,[[]]],[11,"ge","","",151,[[]]],[11,"write","","",151,[[]]],[11,"lanes","","",145,[[]]],[11,"init","","",145,[[]]],[11,"load","","",145,[[]]],[11,"mask_init","","",145,[[]]],[11,"mask_from_u64","","",145,[[]]],[11,"mask_get","","",145,[[]]],[11,"bitmask","","",145,[[]]],[11,"mask_set","","",145,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",145,[[]]],[11,"mask_any","","",145,[[]]],[11,"bin_op","","",145,[[]]],[11,"eq","","",145,[[]]],[11,"ne","","",145,[[]]],[11,"lt","","",145,[[]]],[11,"le","","",145,[[]]],[11,"gt","","",145,[[]]],[11,"ge","","",145,[[]]],[11,"write","","",145,[[]]],[11,"lanes","","",152,[[]]],[11,"init","","",152,[[]]],[11,"load","","",152,[[]]],[11,"mask_init","","",152,[[]]],[11,"mask_from_u64","","",152,[[]]],[11,"mask_get","","",152,[[]]],[11,"bitmask","","",152,[[]]],[11,"mask_set","","",152,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",152,[[]]],[11,"mask_any","","",152,[[]]],[11,"bin_op","","",152,[[]]],[11,"eq","","",152,[[]]],[11,"ne","","",152,[[]]],[11,"lt","","",152,[[]]],[11,"le","","",152,[[]]],[11,"gt","","",152,[[]]],[11,"ge","","",152,[[]]],[11,"write","","",152,[[]]],[11,"lanes","","",153,[[]]],[11,"init","","",153,[[]]],[11,"load","","",153,[[]]],[11,"mask_init","","",153,[[]]],[11,"mask_from_u64","","",153,[[]]],[11,"mask_get","","",153,[[]]],[11,"bitmask","","",153,[[]]],[11,"mask_set","","",153,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",153,[[]]],[11,"mask_any","","",153,[[]]],[11,"bin_op","","",153,[[]]],[11,"eq","","",153,[[]]],[11,"ne","","",153,[[]]],[11,"lt","","",153,[[]]],[11,"le","","",153,[[]]],[11,"gt","","",153,[[]]],[11,"ge","","",153,[[]]],[11,"write","","",153,[[]]],[11,"lanes","","",159,[[]]],[11,"init","","",159,[[]]],[11,"load","","",159,[[]]],[11,"mask_init","","",159,[[]]],[11,"mask_from_u64","","",159,[[]]],[11,"mask_get","","",159,[[]]],[11,"bitmask","","",159,[[]]],[11,"mask_set","","",159,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",159,[[]]],[11,"mask_any","","",159,[[]]],[11,"bin_op","","",159,[[]]],[11,"eq","","",159,[[]]],[11,"ne","","",159,[[]]],[11,"lt","","",159,[[]]],[11,"le","","",159,[[]]],[11,"gt","","",159,[[]]],[11,"ge","","",159,[[]]],[11,"write","","",159,[[]]],[11,"lanes","","",161,[[]]],[11,"init","","",161,[[]]],[11,"load","","",161,[[]]],[11,"mask_init","","",161,[[]]],[11,"mask_from_u64","","",161,[[]]],[11,"mask_get","","",161,[[]]],[11,"bitmask","","",161,[[]]],[11,"mask_set","","",161,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",161,[[]]],[11,"mask_any","","",161,[[]]],[11,"bin_op","","",161,[[]]],[11,"eq","","",161,[[]]],[11,"ne","","",161,[[]]],[11,"lt","","",161,[[]]],[11,"le","","",161,[[]]],[11,"gt","","",161,[[]]],[11,"ge","","",161,[[]]],[11,"write","","",161,[[]]],[11,"lanes","","",148,[[]]],[11,"init","","",148,[[]]],[11,"load","","",148,[[]]],[11,"mask_init","","",148,[[]]],[11,"mask_from_u64","","",148,[[]]],[11,"mask_get","","",148,[[]]],[11,"bitmask","","",148,[[]]],[11,"mask_set","","",148,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",148,[[]]],[11,"mask_any","","",148,[[]]],[11,"bin_op","","",148,[[]]],[11,"eq","","",148,[[]]],[11,"ne","","",148,[[]]],[11,"lt","","",148,[[]]],[11,"le","","",148,[[]]],[11,"gt","","",148,[[]]],[11,"ge","","",148,[[]]],[11,"write","","",148,[[]]],[11,"lanes","","",156,[[]]],[11,"init","","",156,[[]]],[11,"load","","",156,[[]]],[11,"mask_init","","",156,[[]]],[11,"mask_from_u64","","",156,[[]]],[11,"mask_get","","",156,[[]]],[11,"bitmask","","",156,[[]]],[11,"mask_set","","",156,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",156,[[]]],[11,"mask_any","","",156,[[]]],[11,"bin_op","","",156,[[]]],[11,"eq","","",156,[[]]],[11,"ne","","",156,[[]]],[11,"lt","","",156,[[]]],[11,"le","","",156,[[]]],[11,"gt","","",156,[[]]],[11,"ge","","",156,[[]]],[11,"write","","",156,[[]]],[11,"lanes","","",138,[[]]],[11,"init","","",138,[[]]],[11,"load","","",138,[[]]],[11,"mask_init","","",138,[[]]],[11,"mask_from_u64","","",138,[[]]],[11,"mask_get","","",138,[[]]],[11,"bitmask","","",138,[[]]],[11,"mask_set","","",138,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",138,[[]]],[11,"mask_any","","",138,[[]]],[11,"bin_op","","",138,[[]]],[11,"eq","","",138,[[]]],[11,"ne","","",138,[[]]],[11,"lt","","",138,[[]]],[11,"le","","",138,[[]]],[11,"gt","","",138,[[]]],[11,"ge","","",138,[[]]],[11,"write","","",138,[[]]],[11,"lanes","","",143,[[]]],[11,"init","","",143,[[]]],[11,"load","","",143,[[]]],[11,"mask_init","","",143,[[]]],[11,"mask_from_u64","","",143,[[]]],[11,"mask_get","","",143,[[]]],[11,"bitmask","","",143,[[]]],[11,"mask_set","","",143,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",143,[[]]],[11,"mask_any","","",143,[[]]],[11,"bin_op","","",143,[[]]],[11,"eq","","",143,[[]]],[11,"ne","","",143,[[]]],[11,"lt","","",143,[[]]],[11,"le","","",143,[[]]],[11,"gt","","",143,[[]]],[11,"ge","","",143,[[]]],[11,"write","","",143,[[]]],[11,"lanes","","",141,[[]]],[11,"init","","",141,[[]]],[11,"load","","",141,[[]]],[11,"mask_init","","",141,[[]]],[11,"mask_from_u64","","",141,[[]]],[11,"mask_get","","",141,[[]]],[11,"bitmask","","",141,[[]]],[11,"mask_set","","",141,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",141,[[]]],[11,"mask_any","","",141,[[]]],[11,"bin_op","","",141,[[]]],[11,"eq","","",141,[[]]],[11,"ne","","",141,[[]]],[11,"lt","","",141,[[]]],[11,"le","","",141,[[]]],[11,"gt","","",141,[[]]],[11,"ge","","",141,[[]]],[11,"write","","",141,[[]]],[11,"lanes","","",163,[[]]],[11,"init","","",163,[[]]],[11,"load","","",163,[[]]],[11,"mask_init","","",163,[[]]],[11,"mask_from_u64","","",163,[[]]],[11,"mask_get","","",163,[[]]],[11,"bitmask","","",163,[[]]],[11,"mask_set","","",163,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",163,[[]]],[11,"mask_any","","",163,[[]]],[11,"bin_op","","",163,[[]]],[11,"eq","","",163,[[]]],[11,"ne","","",163,[[]]],[11,"lt","","",163,[[]]],[11,"le","","",163,[[]]],[11,"gt","","",163,[[]]],[11,"ge","","",163,[[]]],[11,"write","","",163,[[]]],[11,"lanes","","",146,[[]]],[11,"init","","",146,[[]]],[11,"load","","",146,[[]]],[11,"mask_init","","",146,[[]]],[11,"mask_from_u64","","",146,[[]]],[11,"mask_get","","",146,[[]]],[11,"bitmask","","",146,[[]]],[11,"mask_set","","",146,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",146,[[]]],[11,"mask_any","","",146,[[]]],[11,"bin_op","","",146,[[]]],[11,"eq","","",146,[[]]],[11,"ne","","",146,[[]]],[11,"lt","","",146,[[]]],[11,"le","","",146,[[]]],[11,"gt","","",146,[[]]],[11,"ge","","",146,[[]]],[11,"write","","",146,[[]]],[11,"lanes","","",157,[[]]],[11,"init","","",157,[[]]],[11,"load","","",157,[[]]],[11,"mask_init","","",157,[[]]],[11,"mask_from_u64","","",157,[[]]],[11,"mask_get","","",157,[[]]],[11,"bitmask","","",157,[[]]],[11,"mask_set","","",157,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",157,[[]]],[11,"mask_any","","",157,[[]]],[11,"bin_op","","",157,[[]]],[11,"eq","","",157,[[]]],[11,"ne","","",157,[[]]],[11,"lt","","",157,[[]]],[11,"le","","",157,[[]]],[11,"gt","","",157,[[]]],[11,"ge","","",157,[[]]],[11,"write","","",157,[[]]],[11,"lanes","","",158,[[]]],[11,"init","","",158,[[]]],[11,"load","","",158,[[]]],[11,"mask_init","","",158,[[]]],[11,"mask_from_u64","","",158,[[]]],[11,"mask_get","","",158,[[]]],[11,"bitmask","","",158,[[]]],[11,"mask_set","","",158,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",158,[[]]],[11,"mask_any","","",158,[[]]],[11,"bin_op","","",158,[[]]],[11,"eq","","",158,[[]]],[11,"ne","","",158,[[]]],[11,"lt","","",158,[[]]],[11,"le","","",158,[[]]],[11,"gt","","",158,[[]]],[11,"ge","","",158,[[]]],[11,"write","","",158,[[]]],[11,"lanes","","",142,[[]]],[11,"init","","",142,[[]]],[11,"load","","",142,[[]]],[11,"mask_init","","",142,[[]]],[11,"mask_from_u64","","",142,[[]]],[11,"mask_get","","",142,[[]]],[11,"bitmask","","",142,[[]]],[11,"mask_set","","",142,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",142,[[]]],[11,"mask_any","","",142,[[]]],[11,"bin_op","","",142,[[]]],[11,"eq","","",142,[[]]],[11,"ne","","",142,[[]]],[11,"lt","","",142,[[]]],[11,"le","","",142,[[]]],[11,"gt","","",142,[[]]],[11,"ge","","",142,[[]]],[11,"write","","",142,[[]]],[11,"lanes","","",162,[[]]],[11,"init","","",162,[[]]],[11,"load","","",162,[[]]],[11,"mask_init","","",162,[[]]],[11,"mask_from_u64","","",162,[[]]],[11,"mask_get","","",162,[[]]],[11,"bitmask","","",162,[[]]],[11,"mask_set","","",162,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",162,[[]]],[11,"mask_any","","",162,[[]]],[11,"bin_op","","",162,[[]]],[11,"eq","","",162,[[]]],[11,"ne","","",162,[[]]],[11,"lt","","",162,[[]]],[11,"le","","",162,[[]]],[11,"gt","","",162,[[]]],[11,"ge","","",162,[[]]],[11,"write","","",162,[[]]],[11,"lanes","","",139,[[]]],[11,"init","","",139,[[]]],[11,"load","","",139,[[]]],[11,"mask_init","","",139,[[]]],[11,"mask_from_u64","","",139,[[]]],[11,"mask_get","","",139,[[]]],[11,"bitmask","","",139,[[]]],[11,"mask_set","","",139,[[]]],[11,"mask_select","","Selects elements of `a` and `b` using `mask`",139,[[]]],[11,"mask_any","","",139,[[]]],[11,"bin_op","","",139,[[]]],[11,"eq","","",139,[[]]],[11,"ne","","",139,[[]]],[11,"lt","","",139,[[]]],[11,"le","","",139,[[]]],[11,"gt","","",139,[[]]],[11,"ge","","",139,[[]]],[11,"write","","",139,[[]]],[11,"deserialize","","",62,[[],[["result",4],["intervalunit",4]]]],[11,"deserialize","","",58,[[],[["result",4],["datatype",4]]]],[11,"deserialize","polars::prelude","",172,[[],[["result",4],["field",3]]]],[11,"deserialize","polars::datatypes","",63,[[],[["result",4],["timeunit",4]]]],[11,"deserialize","","",61,[[],[["dateunit",4],["result",4]]]],[11,"deserialize","polars::prelude","",173,[[],[["schema",3],["result",4]]]],[11,"clone","polars::datatypes","",63,[[],["timeunit",4]]],[11,"clone","polars::prelude","",173,[[],["schema",3]]],[11,"clone","polars::datatypes","",62,[[],["intervalunit",4]]],[11,"clone","polars::prelude","",172,[[],["field",3]]],[11,"clone","polars::datatypes","",61,[[],["dateunit",4]]],[11,"clone","","",58,[[],["datatype",4]]],[11,"hash","polars::prelude","",172,[[]]],[11,"hash","polars::datatypes","",63,[[]]],[11,"hash","","",58,[[]]],[11,"hash","","",62,[[]]],[11,"hash","","",61,[[]]],[11,"get_data_type","","",150,[[],["datatype",4]]],[11,"get_data_type","","",146,[[],["datatype",4]]],[11,"get_data_type","","",149,[[],["datatype",4]]],[11,"get_data_type","","",161,[[],["datatype",4]]],[11,"get_data_type","","",147,[[],["datatype",4]]],[11,"get_data_type","","",148,[[],["datatype",4]]],[11,"get_data_type","","",160,[[],["datatype",4]]],[11,"get_data_type","","",163,[[],["datatype",4]]],[11,"get_data_type","","",159,[[],["datatype",4]]],[11,"get_data_type","","",155,[[],["datatype",4]]],[11,"get_data_type","","",137,[[],["datatype",4]]],[11,"get_bit_width","","",137,[[]]],[11,"index","","SafetyThe pointer must be part of a bit-packed boolean…",137,[[]]],[11,"get_data_type","","",142,[[],["datatype",4]]],[11,"get_data_type","","",158,[[],["datatype",4]]],[11,"get_data_type","","",154,[[],["datatype",4]]],[11,"get_data_type","","",151,[[],["datatype",4]]],[11,"get_data_type","","",140,[[],["datatype",4]]],[11,"get_data_type","","",138,[[],["datatype",4]]],[11,"get_data_type","","",141,[[],["datatype",4]]],[11,"get_data_type","","",152,[[],["datatype",4]]],[11,"get_data_type","","",144,[[],["datatype",4]]],[11,"get_data_type","","",153,[[],["datatype",4]]],[11,"get_data_type","","",145,[[],["datatype",4]]],[11,"get_data_type","","",157,[[],["datatype",4]]],[11,"get_data_type","","",139,[[],["datatype",4]]],[11,"get_data_type","","",162,[[],["datatype",4]]],[11,"get_data_type","","",143,[[],["datatype",4]]],[11,"get_data_type","","",156,[[],["datatype",4]]],[11,"from","polars::prelude","",172,[[["field",3]],["field",3]]],[11,"serialize","","",173,[[],["result",4]]],[11,"serialize","polars::datatypes","",63,[[],["result",4]]],[11,"serialize","","",58,[[],["result",4]]],[11,"serialize","","",61,[[],["result",4]]],[11,"serialize","","",62,[[],["result",4]]],[11,"serialize","polars::prelude","",172,[[],["result",4]]],[11,"partial_cmp","polars::datatypes","",62,[[["intervalunit",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","polars::prelude","",172,[[["field",3]],[["option",4],["ordering",4]]]],[11,"lt","","",172,[[["field",3]]]],[11,"le","","",172,[[["field",3]]]],[11,"gt","","",172,[[["field",3]]]],[11,"ge","","",172,[[["field",3]]]],[11,"partial_cmp","polars::datatypes","",63,[[["timeunit",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",58,[[["datatype",4]],[["option",4],["ordering",4]]]],[11,"lt","","",58,[[["datatype",4]]]],[11,"le","","",58,[[["datatype",4]]]],[11,"gt","","",58,[[["datatype",4]]]],[11,"ge","","",58,[[["datatype",4]]]],[11,"partial_cmp","","",61,[[["dateunit",4]],[["option",4],["ordering",4]]]],[11,"fmt","polars::prelude","",172,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",173,[[["formatter",3]],[["result",4],["error",3]]]],[11,"get_time_unit","polars::datatypes","",156,[[],["timeunit",4]]],[11,"get_time_unit","","",157,[[],["timeunit",4]]],[11,"get_time_unit","","",159,[[],["timeunit",4]]],[11,"get_time_unit","","",158,[[],["timeunit",4]]],[11,"rechunk","polars::chunked_array","",37,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",37,[[["chunkedarray",3]],[["result",6],["option",4]]]],[11,"rechunk","polars","",174,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",174,[[["chunkedarray",3]],[["result",6],["option",4]]]],[11,"rechunk","","",175,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",175,[[["chunkedarray",3]],[["result",6],["option",4]]]],[11,"rechunk","","",68,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",68,[[["chunkedarray",3]],[["result",6],["option",4]]]],[11,"rechunk","","",176,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",176,[[["chunkedarray",3]],[["result",6],["option",4]]]],[11,"rolling_sum","polars::chunked_array","",37,[[["option",4]],["result",6]]],[11,"rolling_mean","","",37,[[["option",4]],["result",6]]],[11,"rolling_min","","",37,[[["option",4]],["result",6]]],[11,"rolling_max","","",37,[[["option",4]],["result",6]]],[11,"rolling_custom","","",37,[[["option",4],["initfold",4]],["result",6]]],[11,"get","","",37,[[],["option",4]]],[11,"get_unchecked","","",37,[[]]],[11,"get","polars","",68,[[],["option",4]]],[11,"get_unchecked","","",68,[[]]],[11,"get","polars::prelude","",109,[[],["option",4]]],[11,"get_unchecked","","",109,[[]]],[11,"get","","",110,[[],["option",4]]],[11,"get_unchecked","","",110,[[]]],[11,"take","polars::chunked_array","",37,[[["option",4]]]],[11,"take_unchecked","","",37,[[["option",4]]]],[11,"take_opt","","",37,[[["option",4]]]],[11,"take_opt_unchecked","","",37,[[["option",4]]]],[11,"take","polars","",174,[[["option",4]]]],[11,"take_unchecked","","",174,[[["option",4]]]],[11,"take_opt","","",174,[[["option",4]]]],[11,"take_opt_unchecked","","",174,[[["option",4]]]],[11,"take","","",175,[[["option",4]]]],[11,"take_unchecked","","",175,[[["option",4]]]],[11,"take_opt","","",175,[[["option",4]]]],[11,"take_opt_unchecked","","",175,[[["option",4]]]],[11,"take","","",68,[[["option",4]]]],[11,"take_unchecked","","",68,[[["option",4]]]],[11,"take_opt","","",68,[[["option",4]]]],[11,"take_opt_unchecked","","",68,[[["option",4]]]],[11,"take","","",176,[[["option",4]]]],[11,"take_unchecked","","",176,[[["option",4]]]],[11,"take_opt","","",176,[[["option",4]]]],[11,"take_opt_unchecked","","",176,[[["option",4]]]],[11,"set_at_idx","polars::chunked_array","",37,[[["option",4]],["result",6]]],[11,"set_at_idx_with","","",37,[[],["result",6]]],[11,"set","","",37,[[["option",4],["booleanchunked",6]],["result",6]]],[11,"set_with","","",37,[[["booleanchunked",6]],["result",6]]],[11,"set_at_idx","polars","",174,[[["option",4]],["result",6]]],[11,"set_at_idx_with","","",174,[[],["result",6]]],[11,"set","","",174,[[["option",4],["booleanchunked",6]],["result",6]]],[11,"set_with","","",174,[[["booleanchunked",6]],["result",6]]],[11,"set_at_idx","","",175,[[["option",4]],["result",6]]],[11,"set_at_idx_with","","",175,[[],["result",6]]],[11,"set","","",175,[[["booleanchunked",6],["option",4]],["result",6]]],[11,"set_with","","",175,[[["booleanchunked",6]],["result",6]]],[11,"cast","polars::chunked_array","",37,[[],[["result",6],["chunkedarray",3]]]],[11,"cast","polars","",175,[[],[["result",6],["chunkedarray",3]]]],[11,"cast","","",174,[[],[["result",6],["chunkedarray",3]]]],[11,"cast","","",68,[[],[["result",6],["chunkedarray",3]]]],[11,"apply","polars::chunked_array","Chooses the fastest path for closure application. Null…",37,[[]]],[11,"apply_with_idx","","",37,[[]]],[11,"apply_with_idx_on_opt","","",37,[[]]],[11,"apply","polars","",174,[[]]],[11,"apply_with_idx","","",174,[[]]],[11,"apply_with_idx_on_opt","","",174,[[]]],[11,"apply","","",175,[[]]],[11,"apply_with_idx","","",175,[[]]],[11,"apply_with_idx_on_opt","","",175,[[]]],[11,"sum","polars::chunked_array","",37,[[],["option",4]]],[11,"min","","",37,[[],["option",4]]],[11,"max","","",37,[[],["option",4]]],[11,"mean","","",37,[[],["option",4]]],[11,"median","","",37,[[],["option",4]]],[11,"quantile","","",37,[[],[["result",6],["option",4]]]],[11,"sum","polars","Returns `None` if the array is empty or only contains null…",174,[[],["option",4]]],[11,"min","","",174,[[],["option",4]]],[11,"max","","",174,[[],["option",4]]],[11,"mean","","",174,[[],["option",4]]],[11,"median","","",174,[[],["option",4]]],[11,"quantile","","",174,[[],[["result",6],["option",4]]]],[11,"var","polars::chunked_array","",37,[[],["option",4]]],[11,"std","","",37,[[],["option",4]]],[11,"var","polars","",177,[[],["option",4]]],[11,"std","","",177,[[],["option",4]]],[11,"var","","",178,[[],["option",4]]],[11,"std","","",178,[[],["option",4]]],[11,"eq_missing","polars::chunked_array","",37,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"eq","","",37,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"neq","","",37,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"gt","","",37,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"gt_eq","","",37,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"lt","","",37,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"lt_eq","","",37,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"eq_missing","polars","",174,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"eq","","",174,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"neq","","",174,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"gt","","",174,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"gt_eq","","",174,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"lt","","",174,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"lt_eq","","",174,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"eq_missing","","",175,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"eq","","",175,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"neq","","",175,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"gt","","",175,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"gt_eq","","",175,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"lt","","",175,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"lt_eq","","",175,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"eq_missing","polars::chunked_array","",37,[[],["booleanchunked",6]]],[11,"eq","","",37,[[],["booleanchunked",6]]],[11,"neq","","",37,[[],["booleanchunked",6]]],[11,"gt","","",37,[[],["booleanchunked",6]]],[11,"gt_eq","","",37,[[],["booleanchunked",6]]],[11,"lt","","",37,[[],["booleanchunked",6]]],[11,"lt_eq","","",37,[[],["booleanchunked",6]]],[11,"eq_missing","polars","",175,[[],["booleanchunked",6]]],[11,"eq","","",175,[[],["booleanchunked",6]]],[11,"neq","","",175,[[],["booleanchunked",6]]],[11,"gt","","",175,[[],["booleanchunked",6]]],[11,"gt_eq","","",175,[[],["booleanchunked",6]]],[11,"lt","","",175,[[],["booleanchunked",6]]],[11,"lt_eq","","",175,[[],["booleanchunked",6]]],[11,"eq_missing","","",68,[[["listchunked",6]],["booleanchunked",6]]],[11,"eq","","",68,[[["listchunked",6]],["booleanchunked",6]]],[11,"neq","","",68,[[["listchunked",6]],["booleanchunked",6]]],[11,"gt","","",68,[[["listchunked",6]],["booleanchunked",6]]],[11,"gt_eq","","",68,[[["listchunked",6]],["booleanchunked",6]]],[11,"lt","","",68,[[["listchunked",6]],["booleanchunked",6]]],[11,"lt_eq","","",68,[[["listchunked",6]],["booleanchunked",6]]],[11,"eq_missing","polars::series","",106,[[["series",4]],["booleanchunked",6]]],[11,"eq","","Create a boolean mask by checking for equality.",106,[[["series",4]],["booleanchunked",6]]],[11,"neq","","Create a boolean mask by checking for inequality.",106,[[["series",4]],["booleanchunked",6]]],[11,"gt","","Create a boolean mask by checking if lhs > rhs.",106,[[["series",4]],["booleanchunked",6]]],[11,"gt_eq","","Create a boolean mask by checking if lhs >= rhs.",106,[[["series",4]],["booleanchunked",6]]],[11,"lt","","Create a boolean mask by checking if lhs < rhs.",106,[[["series",4]],["booleanchunked",6]]],[11,"lt_eq","","Create a boolean mask by checking if lhs <= rhs.",106,[[["series",4]],["booleanchunked",6]]],[11,"eq_missing","","",106,[[],["booleanchunked",6]]],[11,"eq","","",106,[[],["booleanchunked",6]]],[11,"neq","","",106,[[],["booleanchunked",6]]],[11,"gt","","",106,[[],["booleanchunked",6]]],[11,"gt_eq","","",106,[[],["booleanchunked",6]]],[11,"lt","","",106,[[],["booleanchunked",6]]],[11,"lt_eq","","",106,[[],["booleanchunked",6]]],[11,"eq_missing","","",106,[[],["booleanchunked",6]]],[11,"eq","","",106,[[],["booleanchunked",6]]],[11,"neq","","",106,[[],["booleanchunked",6]]],[11,"gt","","",106,[[],["booleanchunked",6]]],[11,"gt_eq","","",106,[[],["booleanchunked",6]]],[11,"lt","","",106,[[],["booleanchunked",6]]],[11,"lt_eq","","",106,[[],["booleanchunked",6]]],[11,"unique","polars","",68,[[],[["chunkedarray",3],["result",6]]]],[11,"arg_unique","","",68,[[],[["result",6],["vec",3]]]],[11,"unique","","",176,[[],[["result",6],["chunkedarray",3]]]],[11,"arg_unique","","",176,[[],[["result",6],["vec",3]]]],[11,"unique","polars::chunked_array","",37,[[],["result",6]]],[11,"arg_unique","","",37,[[],[["result",6],["vec",3]]]],[11,"is_unique","","",37,[[],[["booleanchunked",6],["result",6]]]],[11,"is_duplicated","","",37,[[],[["booleanchunked",6],["result",6]]]],[11,"value_counts","","",37,[[],[["dataframe",3],["result",6]]]],[11,"unique","polars","",175,[[],["result",6]]],[11,"arg_unique","","",175,[[],[["result",6],["vec",3]]]],[11,"is_unique","","",175,[[],[["booleanchunked",6],["result",6]]]],[11,"is_duplicated","","",175,[[],[["booleanchunked",6],["result",6]]]],[11,"value_counts","","",175,[[],[["dataframe",3],["result",6]]]],[11,"unique","","",174,[[],["result",6]]],[11,"arg_unique","","",174,[[],[["result",6],["vec",3]]]],[11,"is_unique","","",174,[[],[["booleanchunked",6],["result",6]]]],[11,"is_duplicated","","",174,[[],[["booleanchunked",6],["result",6]]]],[11,"unique","","",177,[[],[["chunkedarray",3],["result",6]]]],[11,"arg_unique","","",177,[[],[["result",6],["vec",3]]]],[11,"is_unique","","",177,[[],[["booleanchunked",6],["result",6]]]],[11,"is_duplicated","","",177,[[],[["booleanchunked",6],["result",6]]]],[11,"value_counts","","",177,[[],[["dataframe",3],["result",6]]]],[11,"unique","","",178,[[],[["chunkedarray",3],["result",6]]]],[11,"arg_unique","","",178,[[],[["result",6],["vec",3]]]],[11,"is_unique","","",178,[[],[["booleanchunked",6],["result",6]]]],[11,"is_duplicated","","",178,[[],[["booleanchunked",6],["result",6]]]],[11,"value_counts","","",178,[[],[["dataframe",3],["result",6]]]],[11,"to_dummies","","",175,[[],[["dataframe",3],["result",6]]]],[11,"to_dummies","polars::chunked_array","",37,[[],[["dataframe",3],["result",6]]]],[11,"sort","","",37,[[],["chunkedarray",3]]],[11,"sort_in_place","","",37,[[]]],[11,"argsort","","",37,[[],["vec",3]]],[11,"sort","polars","",175,[[],["utf8chunked",6]]],[11,"sort_in_place","","",175,[[]]],[11,"argsort","","",175,[[],["vec",3]]],[11,"sort","","",68,[[]]],[11,"sort_in_place","","",68,[[]]],[11,"argsort","","",68,[[],["vec",3]]],[11,"sort","","",176,[[]]],[11,"sort_in_place","","",176,[[]]],[11,"argsort","","",176,[[],["vec",3]]],[11,"sort","","",174,[[],["booleanchunked",6]]],[11,"sort_in_place","","",174,[[]]],[11,"argsort","","",174,[[],["vec",3]]],[11,"fill_none","polars::chunked_array","",37,[[["fillnonestrategy",4]],["result",6]]],[11,"fill_none_with_value","","",37,[[],["result",6]]],[11,"fill_none","polars","",174,[[["fillnonestrategy",4]],["result",6]]],[11,"fill_none_with_value","","",174,[[],["result",6]]],[11,"fill_none","","",175,[[["fillnonestrategy",4]],["result",6]]],[11,"fill_none_with_value","","",175,[[],["result",6]]],[11,"fill_none","","",68,[[["fillnonestrategy",4]],["result",6]]],[11,"fill_none_with_value","","",68,[[["series",4]],["result",6]]],[11,"fill_none","","",176,[[["fillnonestrategy",4]],["result",6]]],[11,"fill_none_with_value","","",176,[[["objecttype",3]],["result",6]]],[11,"full","polars::chunked_array","",37,[[]]],[11,"full_null","","",37,[[]]],[11,"full","polars","",175,[[]]],[11,"full_null","","",175,[[]]],[11,"full","","",68,[[["series",4]],["listchunked",6]]],[11,"full_null","","",68,[[],["listchunked",6]]],[11,"reverse","polars::chunked_array","",37,[[],["chunkedarray",3]]],[11,"reverse","polars","",174,[[]]],[11,"reverse","","",175,[[]]],[11,"reverse","","",68,[[]]],[11,"reverse","","",176,[[]]],[11,"filter","polars::chunked_array","",37,[[["booleanchunked",6]],[["chunkedarray",3],["result",6]]]],[11,"filter","polars","",174,[[["booleanchunked",6]],[["chunkedarray",3],["result",6]]]],[11,"filter","","",175,[[["booleanchunked",6]],[["result",6],["chunkedarray",3]]]],[11,"filter","","",68,[[["booleanchunked",6]],[["listchunked",6],["result",6]]]],[11,"filter","","",176,[[["booleanchunked",6]],[["result",6],["chunkedarray",3]]]],[11,"expand_at_index","polars::chunked_array","",37,[[],["chunkedarray",3]]],[11,"expand_at_index","polars","",175,[[],["utf8chunked",6]]],[11,"expand_at_index","","",68,[[],["listchunked",6]]],[11,"expand_at_index","","",176,[[],["objectchunked",6]]],[11,"shift","polars::chunked_array","",37,[[["option",4]],[["chunkedarray",3],["result",6]]]],[11,"shift","polars","",174,[[["option",4]],[["booleanchunked",6],["result",6]]]],[11,"shift","","",175,[[["option",4]],[["utf8chunked",6],["result",6]]]],[11,"shift","","",68,[[["option",4]],[["listchunked",6],["result",6]]]],[11,"shift","","",176,[[["option",4]],[["result",6],["chunkedarray",3]]]],[11,"zip_with","polars::chunked_array","",37,[[["booleanchunked",6],["chunkedarray",3]],[["chunkedarray",3],["result",6]]]],[11,"zip_with_series","","",37,[[["booleanchunked",6],["series",4]],[["chunkedarray",3],["result",6]]]],[11,"zip_with","polars","",174,[[["booleanchunked",6]],[["booleanchunked",6],["result",6]]]],[11,"zip_with_series","","",174,[[["booleanchunked",6],["series",4]],[["chunkedarray",3],["result",6]]]],[11,"zip_with","","",175,[[["utf8chunked",6],["booleanchunked",6]],[["utf8chunked",6],["result",6]]]],[11,"zip_with_series","","",175,[[["booleanchunked",6],["series",4]],[["result",6],["chunkedarray",3]]]],[11,"zip_with","","",68,[[["booleanchunked",6],["chunkedarray",3]],[["chunkedarray",3],["result",6]]]],[11,"zip_with_series","","",68,[[["booleanchunked",6],["series",4]],[["chunkedarray",3],["result",6]]]],[11,"zip_with","","",176,[[["chunkedarray",3],["booleanchunked",6]],[["result",6],["chunkedarray",3]]]],[11,"zip_with_series","","",176,[[["booleanchunked",6],["series",4]],[["result",6],["chunkedarray",3]]]],[11,"sum_as_series","polars::chunked_array","",37,[[],["series",4]]],[11,"max_as_series","","",37,[[],["series",4]]],[11,"min_as_series","","",37,[[],["series",4]]],[11,"mean_as_series","","",37,[[],["series",4]]],[11,"median_as_series","","",37,[[],["series",4]]],[11,"quantile_as_series","","",37,[[],[["result",6],["series",4]]]],[11,"sum_as_series","polars","",174,[[],["series",4]]],[11,"max_as_series","","",174,[[],["series",4]]],[11,"min_as_series","","",174,[[],["series",4]]],[11,"mean_as_series","","",174,[[],["series",4]]],[11,"median_as_series","","",174,[[],["series",4]]],[11,"quantile_as_series","","",174,[[],[["result",6],["series",4]]]],[11,"sum_as_series","","",175,[[],["series",4]]],[11,"max_as_series","","",175,[[],["series",4]]],[11,"min_as_series","","",175,[[],["series",4]]],[11,"mean_as_series","","",175,[[],["series",4]]],[11,"median_as_series","","",175,[[],["series",4]]],[11,"quantile_as_series","","",175,[[],[["result",6],["series",4]]]],[11,"sum_as_series","","",68,[[],["series",4]]],[11,"max_as_series","","",68,[[],["series",4]]],[11,"min_as_series","","",68,[[],["series",4]]],[11,"mean_as_series","","",68,[[],["series",4]]],[11,"median_as_series","","",68,[[],["series",4]]],[11,"quantile_as_series","","",68,[[],[["result",6],["series",4]]]],[11,"var_as_series","polars::chunked_array","",37,[[],["series",4]]],[11,"std_as_series","","",37,[[],["series",4]]],[11,"var_as_series","polars","",177,[[],["series",4]]],[11,"std_as_series","","",177,[[],["series",4]]],[11,"var_as_series","","",178,[[],["series",4]]],[11,"std_as_series","","",178,[[],["series",4]]],[11,"apply_kernel","polars::chunked_array","",37,[[]]],[11,"apply_kernel_cast","","",37,[[],["chunkedarray",3]]],[11,"apply_kernel","polars","",175,[[]]],[11,"apply_kernel_cast","","",175,[[],["chunkedarray",3]]],[11,"pow_f32","polars::chunked_array","",37,[[],["float32chunked",6]]],[11,"pow_f64","","",37,[[],["float64chunked",6]]],[11,"append_value","polars::chunked_array::builder","Appends a value of type `T` into the builder",27,[[]]],[11,"append_null","","Appends a null slot into the builder",27,[[]]],[11,"finish","","",27,[[],["chunkedarray",3]]],[11,"append_value","","",33,[[["cow",4]]]],[11,"append_null","","",33,[[]]],[11,"finish","","",33,[[],[["utf8type",3],["chunkedarray",3]]]],[11,"new_from_slice","polars::chunked_array","",37,[[]]],[11,"new_from_opt_slice","","",37,[[]]],[11,"new_from_opt_iter","","",37,[[],["chunkedarray",3]]],[11,"new_from_iter","","Create a new ChunkedArray from an iterator.",37,[[],["chunkedarray",3]]],[11,"new_from_slice","polars","",175,[[]]],[11,"new_from_opt_slice","","",175,[[]]],[11,"new_from_opt_iter","","",175,[[]]],[11,"new_from_iter","","Create a new ChunkedArray from an iterator.",175,[[]]],[11,"new_from_slice","","",176,[[]]],[11,"new_from_opt_slice","","",176,[[]]],[11,"new_from_opt_iter","","",176,[[],["objectchunked",6]]],[11,"new_from_iter","","Create a new ChunkedArray from an iterator.",176,[[],["objectchunked",6]]],[11,"append_opt_series","polars::chunked_array::builder","",29,[[["option",4]]]],[11,"append_series","","",29,[[["series",4]]]],[11,"finish","","",29,[[],["listchunked",6]]],[11,"append_opt_series","","",35,[[["option",4]]]],[11,"append_series","","",35,[[["series",4]]]],[11,"finish","","",35,[[],["listchunked",6]]],[11,"lt_series","polars::chunked_array","",37,[[["series",4]],["booleanchunked",6]]],[11,"gt_series","","",37,[[["series",4]],["booleanchunked",6]]],[11,"gt_eq_series","","",37,[[["series",4]],["booleanchunked",6]]],[11,"lt_eq_series","","",37,[[["series",4]],["booleanchunked",6]]],[11,"eq_series","","",37,[[["series",4]],["booleanchunked",6]]],[11,"neq_series","","",37,[[["series",4]],["booleanchunked",6]]],[11,"integer_decode","","",37,[[]]],[11,"new_from_naive_time","polars","",179,[[]]],[11,"parse_from_str_slice","","",179,[[]]],[11,"new_from_naive_time","","",180,[[]]],[11,"parse_from_str_slice","","",180,[[]]],[11,"new_from_naive_time","","",181,[[]]],[11,"parse_from_str_slice","","",181,[[]]],[11,"new_from_naive_time","","",182,[[]]],[11,"parse_from_str_slice","","",182,[[]]],[11,"as_naive_time","","",182,[[],[["option",4],["vec",3]]]],[11,"as_naive_time","","",181,[[],[["option",4],["vec",3]]]],[11,"as_naive_time","","",179,[[],[["option",4],["vec",3]]]],[11,"as_naive_time","","",180,[[],[["option",4],["vec",3]]]],[11,"new_from_naive_datetime","","",183,[[]]],[11,"parse_from_str_slice","","",183,[[]]],[11,"new_from_naive_datetime","","",184,[[]]],[11,"parse_from_str_slice","","",184,[[]]],[11,"new_from_naive_datetime","","",185,[[]]],[11,"parse_from_str_slice","","",185,[[]]],[11,"new_from_naive_datetime","","",186,[[]]],[11,"parse_from_str_slice","","",186,[[]]],[11,"new_from_naive_datetime","","",187,[[]]],[11,"parse_from_str_slice","","",187,[[]]],[11,"new_from_naive_date","","",188,[[]]],[11,"parse_from_str_slice","","",188,[[]]],[11,"as_naive_datetime","","",188,[[],[["option",4],["vec",3]]]],[11,"as_naive_datetime","","",183,[[],[["option",4],["vec",3]]]],[11,"as_naive_datetime","","",184,[[],[["option",4],["vec",3]]]],[11,"as_naive_datetime","","",185,[[],[["option",4],["vec",3]]]],[11,"as_naive_datetime","","",186,[[],[["option",4],["vec",3]]]],[11,"as_naive_datetime","","",187,[[],[["option",4],["vec",3]]]],[11,"as_naive_date","","",188,[[],[["vec",3],["option",4]]]],[11,"as_duration","","",188,[[],["durationsecondchunked",6]]],[11,"as_duration","","",183,[[],["durationmillisecondchunked",6]]],[11,"downcast_chunks","polars::chunked_array","",37,[[],[["vec",3],["primitivearray",3]]]],[11,"downcast_chunks","polars","",175,[[],[["vec",3],["stringarray",6]]]],[11,"downcast_chunks","","",68,[[],[["vec",3],["listarray",6]]]],[11,"downcast_chunks","","",176,[[],[["vec",3],["objectarray",3]]]],[11,"get_data_type","polars::datatypes","",164,[[],["arrowdatatype",4]]],[11,"get_data_type","","",165,[[],["arrowdatatype",4]]],[11,"get_data_type","","",166,[[],["arrowdatatype",4]]],[11,"to_str","","",58,[[],["string",3]]],[11,"group_tuples","polars::chunked_array","",37,[[],["vec",3]]],[11,"group_tuples","polars","",174,[[],["vec",3]]],[11,"group_tuples","","",175,[[],["vec",3]]],[11,"group_tuples","","",178,[[],["vec",3]]],[11,"group_tuples","","",177,[[],["vec",3]]],[11,"hash_join_inner","polars::chunked_array","",37,[[["chunkedarray",3]],["vec",3]]],[11,"hash_join_left","","",37,[[["chunkedarray",3]],["vec",3]]],[11,"hash_join_outer","","",37,[[["chunkedarray",3]],["vec",3]]],[11,"hash_join_inner","polars","",174,[[["booleanchunked",6]],["vec",3]]],[11,"hash_join_left","","",174,[[["booleanchunked",6]],["vec",3]]],[11,"hash_join_outer","","",174,[[["booleanchunked",6]],["vec",3]]],[11,"hash_join_inner","","",175,[[["utf8chunked",6]],["vec",3]]],[11,"hash_join_left","","",175,[[["utf8chunked",6]],["vec",3]]],[11,"hash_join_outer","","",175,[[["utf8chunked",6]],["vec",3]]],[11,"zip_outer_join_column","polars::chunked_array","",37,[[["series",4]],["series",4]]],[11,"zip_outer_join_column","polars","",174,[[["series",4]],["series",4]]],[11,"zip_outer_join_column","","",175,[[["series",4]],["series",4]]],[11,"new","polars::frame::ser::csv","Create a new CsvReader from a file/ stream",78,[[]]],[11,"with_ignore_parser_errors","","Continue with next batch when a ParserError is encountered.",78,[[]]],[11,"finish","","Read the file and create the DataFrame.",78,[[],[["dataframe",3],["result",6]]]],[11,"new","polars::frame::ser::ipc","",169,[[]]],[11,"set_rechunk","","",169,[[]]],[11,"with_ignore_parser_errors","","",169,[[]]],[11,"finish","","",169,[[],[["dataframe",3],["result",6]]]],[11,"new","polars::frame::ser::json","",80,[[]]],[11,"with_ignore_parser_errors","","",80,[[]]],[11,"set_rechunk","","",80,[[]]],[11,"finish","","",80,[[],[["dataframe",3],["result",6]]]],[11,"new","polars::frame::ser::parquet","",171,[[]]],[11,"set_rechunk","","",171,[[]]],[11,"with_ignore_parser_errors","","",171,[[]]],[11,"finish","","",171,[[],[["dataframe",3],["result",6]]]],[11,"new","polars::frame::ser::csv","",77,[[]]],[11,"finish","","",77,[[["dataframe",3]],["result",6]]],[11,"new","polars::frame::ser::ipc","",79,[[]]],[11,"finish","","",79,[[["dataframe",3]],["result",6]]],[11,"into_series","polars::series","",106,[[],["series",4]]],[11,"into_series","polars::chunked_array","",37,[[],["series",4]]],[11,"subtract","","",37,[[["series",4]],[["result",6],["series",4]]]],[11,"add_to","","",37,[[["series",4]],[["result",6],["series",4]]]],[11,"multiply","","",37,[[["series",4]],[["result",6],["series",4]]]],[11,"divide","","",37,[[["series",4]],[["result",6],["series",4]]]],[11,"remainder","","",37,[[["series",4]],[["result",6],["series",4]]]],[11,"add_to","polars","",175,[[["series",4]],[["result",6],["series",4]]]],[11,"ref_field","","",176,[[],["field",3]]],[11,"agg_n_unique","","",176,[[],[["option",4],["uint32chunked",6]]]],[11,"fmt_list","","",176,[[],["string",3]]],[11,"append","","",176,[[["seriesops",8]]]],[11,"rename","","",176,[[]]],[11,"agg_first","","",176,[[],["series",4]]],[11,"chunk_id","","",176,[[],["vec",3]]],[11,"fill_none","","",176,[[["fillnonestrategy",4]],[["result",6],["box",3]]]],[11,"is_null","","",176,[[],["booleanchunked",6]]],[11,"is_not_null","","",176,[[],["booleanchunked",6]]],[11,"zip_with_series","","",176,[[["booleanchunked",6],["series",4]],[["result",6],["box",3]]]],[11,"shift","","",176,[[["option",4]],[["result",6],["box",3]]]],[11,"name","","",176,[[]]],[11,"get_any","","",176,[[],["anytype",4]]],[11,"get_as_any","","",176,[[],["any",8]]],[11,"rechunk","","",176,[[["option",4]],[["result",6],["box",3]]]],[11,"reverse","","",176,[[],[["seriesops",8],["box",3]]]],[11,"null_count","","",176,[[]]],[11,"head","","",176,[[["option",4]],[["seriesops",8],["box",3]]]],[11,"tail","","",176,[[["option",4]],[["seriesops",8],["box",3]]]],[11,"len","","",176,[[]]],[11,"is_empty","","",176,[[]]],[11,"chunks","","",176,[[],["vec",3]]],[11,"chunks_mut","","",176,[[],["vec",3]]],[11,"dtype","","",176,[[],["datatype",4]]],[11,"take","","",176,[[["iterator",8],["option",4]],[["seriesops",8],["box",3]]]],[11,"take_unchecked","","",176,[[["iterator",8],["option",4]],[["seriesops",8],["box",3]]]],[11,"take_opt","","",176,[[["option",4],["iterator",8]],[["seriesops",8],["box",3]]]],[11,"take_opt_unchecked","","",176,[[["option",4],["iterator",8]],[["seriesops",8],["box",3]]]],[11,"expand_at_index","","",176,[[],[["seriesops",8],["box",3]]]],[11,"filter","","",176,[[["booleanchunked",6]],[["result",6],["box",3]]]],[11,"limit","","",176,[[],[["result",6],["box",3]]]],[11,"slice","","",176,[[],[["result",6],["box",3]]]],[11,"clone","","",176,[[],[["seriesops",8],["box",3]]]],[11,"new","polars::series","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"new","","",106,[[]]],[11,"drop","polars::chunked_array::builder","",34,[[]]],[11,"as_mut","polars::series","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_mut","","",106,[[],["chunkedarray",3]]],[11,"as_ref","polars::chunked_array","",37,[[],["chunkedarray",3]]],[11,"as_ref","polars::series","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["chunkedarray",3]]],[11,"as_ref","","",106,[[],["box",3]]],[11,"from","polars::error","",67,[[["arrowerror",4]]]],[11,"from","","",67,[[["parqueterror",4]]]],[11,"from","","",67,[[["error",3]]]],[11,"from","","",67,[[["error",3]]]],[11,"from","","",67,[[["error",4]]]],[11,"from","polars::lazy::dsl","",93,[[]]],[11,"from","polars::series","",106,[[]]],[11,"from","","",106,[[["chunkedarray",3]]]],[11,"from","","",106,[[["box",3],["seriesops",8]]]],[11,"next_back","polars::chunked_array::iterator","",111,[[],["option",4]]],[11,"next_back","","",112,[[],["option",4]]],[11,"next_back","","",113,[[],["option",4]]],[11,"next_back","","",114,[[],["option",4]]],[11,"next_back","","",40,[[],["option",4]]],[11,"next_back","","",115,[[],["option",4]]],[11,"next_back","","",116,[[],["option",4]]],[11,"next_back","","",41,[[],["option",4]]],[11,"next_back","","",117,[[],["option",4]]],[11,"next_back","","",118,[[],["option",4]]],[11,"next_back","","",119,[[],["option",4]]],[11,"next_back","","",120,[[],["option",4]]],[11,"next_back","","",42,[[],["option",4]]],[11,"next_back","","",122,[[],["option",4]]],[11,"next_back","","",123,[[],["option",4]]],[11,"next_back","","",124,[[],["option",4]]],[11,"next_back","","",125,[[],["option",4]]],[11,"next_back","","",43,[[],["option",4]]],[11,"next_back","","",127,[[],["option",4]]],[11,"next_back","","",128,[[],["option",4]]],[11,"next_back","","",129,[[],["option",4]]],[11,"next_back","","",130,[[],["option",4]]],[11,"next_back","","",44,[[],["option",4]]],[11,"next","","",111,[[],["option",4]]],[11,"size_hint","","",111,[[]]],[11,"next","","",112,[[],["option",4]]],[11,"size_hint","","",112,[[]]],[11,"next","","",113,[[],["option",4]]],[11,"size_hint","","",113,[[]]],[11,"next","","",114,[[],["option",4]]],[11,"size_hint","","",114,[[]]],[11,"next","","",40,[[],["option",4]]],[11,"size_hint","","",40,[[]]],[11,"next","","",115,[[],["option",4]]],[11,"size_hint","","",115,[[]]],[11,"next","","",116,[[],["option",4]]],[11,"size_hint","","",116,[[]]],[11,"next","","",41,[[],["option",4]]],[11,"size_hint","","",41,[[]]],[11,"next","","",117,[[],["option",4]]],[11,"size_hint","","",117,[[]]],[11,"next","","",118,[[],["option",4]]],[11,"size_hint","","",118,[[]]],[11,"next","","",119,[[],["option",4]]],[11,"size_hint","","",119,[[]]],[11,"next","","",120,[[],["option",4]]],[11,"size_hint","","",120,[[]]],[11,"next","","",42,[[],["option",4]]],[11,"size_hint","","",42,[[]]],[11,"next","","",121,[[],["option",4]]],[11,"size_hint","","",121,[[]]],[11,"next","","",122,[[],["option",4]]],[11,"size_hint","","",122,[[]]],[11,"next","","",123,[[],["option",4]]],[11,"size_hint","","",123,[[]]],[11,"next","","",124,[[],["option",4]]],[11,"size_hint","","",124,[[]]],[11,"next","","",125,[[],["option",4]]],[11,"size_hint","","",125,[[]]],[11,"next","","",43,[[],["option",4]]],[11,"size_hint","","",43,[[]]],[11,"next","","",126,[[],["option",4]]],[11,"size_hint","","",126,[[]]],[11,"next","","",127,[[],["option",4]]],[11,"size_hint","","",127,[[]]],[11,"next","","",128,[[],["option",4]]],[11,"size_hint","","",128,[[]]],[11,"next","","",129,[[],["option",4]]],[11,"size_hint","","",129,[[]]],[11,"next","","",130,[[],["option",4]]],[11,"size_hint","","",130,[[]]],[11,"next","","",44,[[],["option",4]]],[11,"size_hint","","",44,[[]]],[11,"next","polars::frame","",167,[[],["option",4]]],[11,"clone","polars::prelude","",100,[[],["initfold",4]]],[11,"clone","polars::chunked_array::ops","",1,[[],["fillnonestrategy",4]]],[11,"clone","polars::chunked_array::iterator::par::utf8","",131,[[],["utf8paritersinglechunkreturnoption",3]]],[11,"clone","","",132,[[],["utf8paritersinglechunknullcheckreturnoption",3]]],[11,"clone","","",133,[[],["utf8paritermanychunkreturnoption",3]]],[11,"clone","","",134,[[],["utf8paritermanychunknullcheckreturnoption",3]]],[11,"clone","","",135,[[],["utf8paritersinglechunkreturnunwrapped",3]]],[11,"clone","","",136,[[],["utf8paritermanychunkreturnunwrapped",3]]],[11,"clone","polars::chunked_array::object","",49,[[],["objectarray",3]]],[11,"clone","polars::chunked_array","",37,[[]]],[11,"clone","polars::frame::group_by","",71,[[],["groupby",3]]],[11,"clone","polars::frame::ser::csv","",76,[[],["csvencoding",4]]],[11,"clone","polars::frame","",69,[[],["dataframe",3]]],[11,"clone","polars::lazy::dsl","",85,[[],["expr",4]]],[11,"clone","","",93,[[],["operator",4]]],[11,"clone","polars::lazy::frame","",98,[[],["lazyframe",3]]],[11,"clone","polars::series","",106,[[]]],[11,"default","polars::chunked_array::object::builder","",48,[[]]],[11,"default","polars::chunked_array","",37,[[]]],[11,"default","polars::frame","",69,[[]]],[11,"default","polars::lazy::frame","",98,[[]]],[11,"default","polars::series","",106,[[]]],[11,"eq","polars::datatypes","",64,[[]]],[11,"eq","polars::lazy::dsl","",85,[[]]],[11,"eq","","",93,[[["operator",4]]]],[11,"fmt","polars::chunked_array::ops","",1,[[["formatter",3]],["result",6]]],[11,"fmt","polars::chunked_array::builder","",34,[[["formatter",3]],["result",6]]],[11,"fmt","polars::chunked_array::iterator::par::utf8","",131,[[["formatter",3]],["result",6]]],[11,"fmt","","",132,[[["formatter",3]],["result",6]]],[11,"fmt","","",133,[[["formatter",3]],["result",6]]],[11,"fmt","","",134,[[["formatter",3]],["result",6]]],[11,"fmt","","",135,[[["formatter",3]],["result",6]]],[11,"fmt","","",136,[[["formatter",3]],["result",6]]],[11,"fmt","polars::chunked_array::object","",49,[[["formatter",3]],["result",6]]],[11,"fmt","polars::datatypes","",64,[[["formatter",3]],["result",6]]],[11,"fmt","polars::error","",67,[[["formatter",3]],["result",6]]],[11,"fmt","polars::chunked_array","",37,[[["formatter",3]],["result",6]]],[11,"fmt","polars","",175,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",176,[[["formatter",3]],["result",6]]],[11,"fmt","polars::series","",106,[[["formatter",3]],["result",6]]],[11,"fmt","polars::frame","",69,[[["formatter",3]],["result",6]]],[11,"fmt","polars::frame::group_by","",71,[[["formatter",3]],["result",6]]],[11,"fmt","polars::lazy::dsl","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","polars::error","",67,[[["formatter",3]],["result",6]]],[11,"fmt","polars::series","",106,[[["formatter",3]],["result",6]]],[11,"fmt","polars::frame","",69,[[["formatter",3]],["result",6]]],[11,"fmt","polars::datatypes","",64,[[["formatter",3]],["result",6]]],[11,"div","polars::chunked_array","",37,[[]]],[11,"div","polars::frame","",69,[[["series",4]]]],[11,"div","polars::lazy::dsl","",85,[[]]],[11,"div","polars::series","",106,[[]]],[11,"div","","",106,[[]]],[11,"rem","polars::chunked_array","",37,[[]]],[11,"rem","polars::frame","",69,[[["series",4]]]],[11,"rem","polars::lazy::dsl","",85,[[]]],[11,"rem","polars::series","",106,[[]]],[11,"sub","polars::chunked_array","",37,[[]]],[11,"sub","polars::frame","",69,[[["series",4]]]],[11,"sub","polars::lazy::dsl","",85,[[]]],[11,"sub","polars::series","",106,[[]]],[11,"sub","","",106,[[]]],[11,"add","polars::chunked_array","",37,[[]]],[11,"add","polars","",175,[[]]],[11,"add","polars::frame","",69,[[["series",4]]]],[11,"add","polars::lazy::dsl","",85,[[]]],[11,"add","polars::series","",106,[[]]],[11,"add","","",106,[[]]],[11,"mul","polars::chunked_array","",37,[[]]],[11,"mul","polars::frame","",69,[[["series",4]]]],[11,"mul","polars::lazy::dsl","",85,[[]]],[11,"mul","polars::series","",106,[[]]],[11,"mul","","",106,[[]]],[11,"not","polars","",174,[[]]],[11,"bitand","","",174,[[]]],[11,"bitor","","",174,[[]]],[11,"index","polars::frame","",69,[[]]],[11,"index","","",69,[[["range",3]]]],[11,"index","","",69,[[["rangeinclusive",3]]]],[11,"index","","",69,[[["rangefrom",3]]]],[11,"index","","",69,[[["rangeto",3]]]],[11,"index","","",69,[[["rangetoinclusive",3]]]],[11,"index","","",69,[[["rangefull",3]]]],[11,"index","","",69,[[]]],[11,"index_mut","","",69,[[]]],[11,"hash","polars::lazy::dsl","",93,[[]]],[11,"from_iter","polars::chunked_array","",37,[[["intoiterator",8]]]],[11,"from_iter","polars::chunked_array::builder","",34,[[["intoiterator",8]]]],[11,"from_iter","polars::chunked_array","",37,[[["intoiterator",8]]]],[11,"from_iter","polars","",174,[[["intoiterator",8]]]],[11,"from_iter","","",175,[[["intoiterator",8]]]],[11,"from_iter","","",175,[[["intoiterator",8]]]],[11,"from_iter","","",175,[[["intoiterator",8]]]],[11,"from_iter","","",175,[[["intoiterator",8]]]],[11,"from_iter","","",175,[[["intoiterator",8]]]],[11,"from_iter","","",175,[[["intoiterator",8]]]],[11,"from_iter","","",175,[[["intoiterator",8]]]],[11,"from_iter","","",175,[[["intoiterator",8]]]],[11,"from_iter","","",68,[[["intoiterator",8]]]],[11,"from_iter","","",68,[[["intoiterator",8]]]],[11,"from_iter","","",68,[[["intoiterator",8]]]],[11,"from_iter","","",68,[[["intoiterator",8]]]],[11,"from_iter","polars::frame","PanicsPanics if Series have different lengths.",69,[[["intoiterator",8]]]],[11,"from_iter","polars::series","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"from_iter","","",106,[[["intoiterator",8]]]],[11,"source","polars::error","",67,[[],[["option",4],["error",8]]]],[11,"as_any","polars::chunked_array::object","",49,[[],["any",8]]],[11,"data","","",49,[[],["arraydataref",6]]],[11,"data_ref","","",49,[[],["arraydataref",6]]],[11,"data_type","","",49,[[],["arrowdatatype",4]]],[11,"slice","","",49,[[],["arrayref",6]]],[11,"len","","",49,[[]]],[11,"is_empty","","",49,[[]]],[11,"offset","","",49,[[]]],[11,"is_null","","",49,[[]]],[11,"is_valid","","",49,[[]]],[11,"null_count","","",49,[[]]],[11,"get_buffer_memory_size","","",49,[[]]],[11,"get_array_memory_size","","",49,[[]]],[11,"equals_json","","",49,[[]]],[11,"equals","","",49,[[["array",8]]]],[11,"range_equals","","",49,[[["array",8]]]],[11,"len","polars::chunked_array::iterator::par::utf8","",131,[[]]],[11,"drive","","",131,[[]]],[11,"with_producer","","",131,[[]]],[11,"len","","",132,[[]]],[11,"drive","","",132,[[]]],[11,"with_producer","","",132,[[]]],[11,"len","","",133,[[]]],[11,"drive","","",133,[[]]],[11,"with_producer","","",133,[[]]],[11,"len","","",134,[[]]],[11,"drive","","",134,[[]]],[11,"with_producer","","",134,[[]]],[11,"len","","",45,[[]]],[11,"drive","","",45,[[]]],[11,"with_producer","","",45,[[]]],[11,"len","","",135,[[]]],[11,"drive","","",135,[[]]],[11,"with_producer","","",135,[[]]],[11,"len","","",136,[[]]],[11,"drive","","",136,[[]]],[11,"with_producer","","",136,[[]]],[11,"len","","",46,[[]]],[11,"drive","","",46,[[]]],[11,"with_producer","","",46,[[]]],[11,"into_par_iter","polars::chunked_array","",0,[[]]],[11,"drive_unindexed","polars::chunked_array::iterator::par::utf8","",131,[[]]],[11,"opt_len","","",131,[[],["option",4]]],[11,"drive_unindexed","","",132,[[]]],[11,"opt_len","","",132,[[],["option",4]]],[11,"drive_unindexed","","",133,[[]]],[11,"opt_len","","",133,[[],["option",4]]],[11,"drive_unindexed","","",134,[[]]],[11,"opt_len","","",134,[[],["option",4]]],[11,"drive_unindexed","","",45,[[]]],[11,"opt_len","","",45,[[],["option",4]]],[11,"drive_unindexed","","",135,[[]]],[11,"opt_len","","",135,[[],["option",4]]],[11,"drive_unindexed","","",136,[[]]],[11,"opt_len","","",136,[[],["option",4]]],[11,"drive_unindexed","","",46,[[]]],[11,"opt_len","","",46,[[],["option",4]]],[11,"from_par_iter","polars::chunked_array","",37,[[["intoparalleliterator",8]]]],[11,"from_par_iter","polars","",174,[[["intoparalleliterator",8]]]],[11,"from_par_iter","","",175,[[["intoparalleliterator",8]]]],[11,"from_par_iter","","",175,[[["intoparalleliterator",8]]]],[11,"from_par_iter","","",175,[[["intoparalleliterator",8]]]],[11,"from_par_iter","","",175,[[["intoparalleliterator",8]]]],[11,"as_opt_take_iter","polars::prelude","",102,[[],[["box",3],["iterator",8]]]],[11,"all_true","polars::datatypes","",174,[[]]],[11,"all_false","","",174,[[]]],[11,"to_ndarray","","If all nested `Series` have the same length, a 2…",68,[[],[["result",6],["array2",6]]]],[11,"to_ndarray","polars::frame","Create a 2D `ndarray::Array` from this `DataFrame`. This…",69,[[],[["result",6],["array2",6]]]],[11,"new_from_vec","polars::datatypes","",176,[[["vec",3]]]],[11,"get_as_any","","",176,[[],["any",8]]],[11,"rand_bernoulli","","Create `ChunkedArray` with samples from a Bernoulli…",174,[[],["result",6]]],[11,"str_lengths","","Get the length of the string values.",175,[[],["uint32chunked",6]]],[11,"contains","","Check if strings contain a regex pattern",175,[[],[["booleanchunked",6],["result",6]]]],[11,"replace","","Replace the leftmost (sub)string by a regex pattern",175,[[],[["utf8chunked",6],["result",6]]]],[11,"replace_all","","Replace all (sub)strings by a regex pattern",175,[[],[["utf8chunked",6],["result",6]]]],[11,"to_lowercase","","Modify the strings to their lowercase equivalent",175,[[],["utf8chunked",6]]],[11,"to_uppercase","","Modify the strings to their uppercase equivalent",175,[[],["utf8chunked",6]]],[11,"as_date32","","",175,[[["option",4]],[["result",6],["date32chunked",6]]]],[11,"as_date64","","",175,[[["option",4]],[["result",6],["date64chunked",6]]]],[11,"year","","Extract month from underlying NaiveDateTime…",183,[[],["int32chunked",6]]],[11,"month","","Extract month from underlying NaiveDateTime…",183,[[],["uint32chunked",6]]],[11,"day","","Extract day from underlying NaiveDateTime representation.…",183,[[],["uint32chunked",6]]],[11,"hour","","Extract hour from underlying NaiveDateTime representation.…",183,[[],["uint32chunked",6]]],[11,"minute","","Extract minute from underlying NaiveDateTime…",183,[[],["uint32chunked",6]]],[11,"second","","Extract second from underlying NaiveDateTime…",183,[[],["uint32chunked",6]]],[11,"nanosecond","","Extract second from underlying NaiveDateTime…",183,[[],["uint32chunked",6]]],[11,"ordinal","","Returns the day of year starting from 1.",183,[[],["uint32chunked",6]]],[11,"year","","Extract month from underlying NaiveDateTime…",188,[[],["int32chunked",6]]],[11,"month","","Extract month from underlying NaiveDateTime…",188,[[],["uint32chunked",6]]],[11,"day","","Extract day from underlying NaiveDateTime representation.…",188,[[],["uint32chunked",6]]],[11,"ordinal","","Returns the day of year starting from 1.",188,[[],["uint32chunked",6]]],[11,"to_json","","Generate a JSON representation of the data type",58,[[],["value",4]]],[11,"new","polars::frame::ser::csv","Create a new builder for configuring CSV writing options.",168,[[],["writerbuilder",3]]],[11,"has_headers","","Set whether to write headers",168,[[],["writerbuilder",3]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",168,[[],["writerbuilder",3]]],[11,"with_date_format","","Set the CSV file\'s date format",168,[[["string",3]],["writerbuilder",3]]],[11,"with_time_format","","Set the CSV file\'s time format",168,[[["string",3]],["writerbuilder",3]]],[11,"with_timestamp_format","","Set the CSV file\'s timestamp format",168,[[["string",3]],["writerbuilder",3]]],[11,"build","","Create a new `Writer`",168,[[],["writer",3]]],[11,"new","polars::frame::ser::json","Create a new builder for configuring JSON parsing options.",170,[[],["readerbuilder",3]]],[11,"with_schema","","Set the JSON file\'s schema",170,[[["schema",3],["arc",3]],["readerbuilder",3]]],[11,"infer_schema","","Set the JSON reader to infer the schema of the file",170,[[["option",4]],["readerbuilder",3]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",170,[[],["readerbuilder",3]]],[11,"with_projection","","Set the reader\'s column projection",170,[[["vec",3],["string",3]],["readerbuilder",3]]],[11,"build","","Create a new `Reader` from the `ReaderBuilder`",170,[[],[["reader",3],["result",4],["arrowerror",4]]]],[11,"new","polars::prelude","Creates a new field",172,[[["datatype",4]],["field",3]]],[11,"new_dict","","Creates a new field",172,[[["datatype",4]],["field",3]]],[11,"name","","Returns an immutable reference to the `Field`\'s name",172,[[],["string",3]]],[11,"data_type","","Returns an immutable reference to the `Field`\'s  data-type",172,[[],["datatype",4]]],[11,"is_nullable","","Indicates whether this `Field` supports null values",172,[[]]],[11,"from","","Parse a `Field` definition from a JSON representation",172,[[["value",4]],[["field",3],["arrowerror",4],["result",4]]]],[11,"to_json","","Generate a JSON representation of the `Field`",172,[[],["value",4]]],[11,"try_merge","","Merge field into self if it is compatible. Struct will be…",172,[[["field",3]],[["result",4],["arrowerror",4]]]],[11,"empty","","Creates an empty `Schema`",173,[[],["schema",3]]],[11,"new","","Creates a new `Schema` from a sequence of `Field` values",173,[[["vec",3],["field",3]],["schema",3]]],[11,"new_with_metadata","","Creates a new `Schema` from a sequence of `Field` values…",173,[[["vec",3],["string",3],["randomstate",3],["hashmap",3],["field",3]],["schema",3]]],[11,"try_merge","","Merge schema into self if it is compatible. Struct fields…",173,[[],[["schema",3],["arrowerror",4],["result",4]]]],[11,"fields","","Returns an immutable reference of the vector of `Field`…",173,[[],["vec",3]]],[11,"field","","Returns an immutable reference of a specific `Field`…",173,[[],["field",3]]],[11,"field_with_name","","Returns an immutable reference of a specific `Field`…",173,[[],[["arrowerror",4],["result",4],["field",3]]]],[11,"index_of","","Find the index of the column with the given name",173,[[],[["result",4],["arrowerror",4]]]],[11,"metadata","","Returns an immutable reference to the Map of custom…",173,[[],["hashmap",3]]],[11,"column_with_name","","Look up a column by name and return a immutable reference…",173,[[],["option",4]]],[11,"to_json","","Generate a JSON representation of the `Schema`",173,[[],["value",4]]],[11,"from","","Parse a `Schema` definition from a JSON representation",173,[[["value",4]],[["schema",3],["arrowerror",4],["result",4]]]]],"p":[[3,"NoNull"],[4,"FillNoneStrategy"],[8,"ChunkBytes"],[8,"ChunkWindow"],[8,"TakeRandom"],[8,"TakeRandomUtf8"],[8,"ChunkTake"],[8,"ChunkSet"],[8,"ChunkCast"],[8,"ChunkApply"],[8,"ChunkAgg"],[8,"ChunkVar"],[8,"ChunkCompare"],[8,"ChunkUnique"],[8,"ToDummies"],[8,"ChunkSort"],[8,"ChunkFillNone"],[8,"ChunkFull"],[8,"ChunkReverse"],[8,"ChunkFilter"],[8,"ChunkExpandAtIndex"],[8,"ChunkShift"],[8,"ChunkZip"],[8,"ChunkAggSeries"],[8,"VarAggSeries"],[8,"ChunkApplyKernel"],[8,"Pow"],[3,"PrimitiveChunkedBuilder"],[3,"Utf8ChunkedBuilder"],[3,"ListPrimitiveChunkedBuilder"],[8,"ChunkedBuilder"],[8,"NewChunkedArray"],[8,"ListBuilderTrait"],[3,"Utf8ChunkedBuilderCow"],[3,"AlignedVec"],[3,"ListUtf8ChunkedBuilder"],[8,"CompToSeries"],[3,"ChunkedArray"],[8,"ChunkIntegerDecode"],[8,"IntegerDecode"],[4,"NumericChunkIterDispatch"],[4,"Utf8ChunkIterReturnUnwrappedDispatch"],[4,"Utf8ChunkIterReturnOptionDispatch"],[4,"BooleanIterDispatch"],[4,"ListIterDispatch"],[4,"Utf8ChunkParIterReturnOptionDispatch"],[4,"Utf8ChunkParIterReturnUnwrapppedDispatch"],[8,"IntoNoNullIterator"],[3,"ObjectChunkedBuilder"],[3,"ObjectArray"],[8,"FromNaiveTime"],[8,"AsNaiveTime"],[8,"FromNaiveDateTime"],[8,"FromNaiveDate"],[8,"AsNaiveDateTime"],[8,"AsNaiveDate"],[8,"AsDuration"],[8,"Downcast"],[4,"ArrowDataType"],[8,"ArrowNumericType"],[8,"ArrowPrimitiveType"],[4,"DateUnit"],[4,"IntervalUnit"],[4,"TimeUnit"],[4,"AnyType"],[8,"PolarsDataType"],[8,"ToStr"],[4,"PolarsError"],[6,"ListChunked"],[3,"DataFrame"],[8,"IntoGroupTuples"],[3,"GroupBy"],[3,"Pivot"],[8,"HashJoin"],[8,"ZipOuterJoinColumn"],[8,"Selection"],[4,"CsvEncoding"],[3,"CsvWriter"],[3,"CsvReader"],[3,"IPCWriter"],[3,"JsonReader"],[8,"SerReader"],[8,"SerWriter"],[8,"ArrowReader"],[8,"IntoSeries"],[4,"Expr"],[13,"BinaryExpr"],[13,"Cast"],[13,"Sort"],[13,"AggQuantile"],[13,"Ternary"],[13,"Apply"],[13,"Shift"],[4,"Operator"],[8,"Udf"],[8,"Literal"],[3,"When"],[3,"WhenThen"],[3,"LazyFrame"],[3,"LazyGroupBy"],[4,"InitFold"],[8,"ChunkOps"],[8,"AsTakeIndex"],[8,"IntoTakeRandom"],[8,"LhsNumOps"],[8,"NumOpsDispatch"],[4,"Series"],[8,"SeriesOps"],[8,"NamedFrom"],[3,"NumTakeRandomChunked"],[3,"NumTakeRandomCont"],[3,"NumIterSingleChunkNullCheck"],[3,"NumIterSingleChunk"],[3,"NumIterManyChunk"],[3,"NumIterManyChunkNullCheck"],[3,"Utf8IterSingleChunkReturnUnwrapped"],[3,"Utf8IterManyChunkReturnUnwrapped"],[3,"Utf8IterSingleChunkReturnOption"],[3,"Utf8IterSingleChunkNullCheckReturnOption"],[3,"Utf8IterManyChunkReturnOption"],[3,"Utf8IterManyChunkNullCheckReturnOption"],[3,"BooleanIterCont"],[3,"BooleanIterSingleChunk"],[3,"BooleanIterSingleChunkNullCheck"],[3,"BooleanIterManyChunk"],[3,"BooleanIterManyChunkNullCheck"],[3,"ListIterCont"],[3,"ListIterSingleChunk"],[3,"ListIterSingleChunkNullCheck"],[3,"ListIterManyChunk"],[3,"ListIterManyChunkNullCheck"],[3,"Utf8ParIterSingleChunkReturnOption"],[3,"Utf8ParIterSingleChunkNullCheckReturnOption"],[3,"Utf8ParIterManyChunkReturnOption"],[3,"Utf8ParIterManyChunkNullCheckReturnOption"],[3,"Utf8ParIterSingleChunkReturnUnwrapped"],[3,"Utf8ParIterManyChunkReturnUnwrapped"],[3,"BooleanType"],[3,"Date32Type"],[3,"Date64Type"],[3,"DurationMicrosecondType"],[3,"DurationMillisecondType"],[3,"DurationNanosecondType"],[3,"DurationSecondType"],[3,"Float32Type"],[3,"Float64Type"],[3,"Int16Type"],[3,"Int32Type"],[3,"Int64Type"],[3,"Int8Type"],[3,"IntervalDayTimeType"],[3,"IntervalYearMonthType"],[3,"Time32MillisecondType"],[3,"Time32SecondType"],[3,"Time64MicrosecondType"],[3,"Time64NanosecondType"],[3,"TimestampMicrosecondType"],[3,"TimestampMillisecondType"],[3,"TimestampNanosecondType"],[3,"TimestampSecondType"],[3,"UInt16Type"],[3,"UInt32Type"],[3,"UInt64Type"],[3,"UInt8Type"],[3,"Utf8Type"],[3,"ListType"],[3,"ObjectType"],[3,"RecordBatchIter"],[3,"WriterBuilder"],[3,"IPCReader"],[3,"ReaderBuilder"],[3,"ParquetReader"],[3,"Field"],[3,"Schema"],[6,"BooleanChunked"],[6,"Utf8Chunked"],[6,"ObjectChunked"],[6,"Float32Chunked"],[6,"Float64Chunked"],[6,"Time64NanosecondChunked"],[6,"Time64MicrosecondChunked"],[6,"Time32MillisecondChunked"],[6,"Time32SecondChunked"],[6,"Date64Chunked"],[6,"TimestampNanosecondChunked"],[6,"TimestampMicrosecondChunked"],[6,"TimestampMillisecondChunked"],[6,"TimestampSecondChunked"],[6,"Date32Chunked"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);